[{"D:\\demoTestCopy\\src\\index.js":"1","D:\\demoTestCopy\\src\\reportWebVitals.js":"2","D:\\demoTestCopy\\src\\store\\vueStore\\index.ts":"3","D:\\demoTestCopy\\src\\store\\vuex\\index.ts":"4","D:\\demoTestCopy\\src\\router\\route.tsx":"5","D:\\demoTestCopy\\src\\router\\router.tsx":"6","D:\\demoTestCopy\\src\\utils\\ContextState.tsx":"7","D:\\demoTestCopy\\src\\router\\index.tsx":"8","D:\\demoTestCopy\\src\\store\\vueStore\\store.ts":"9","D:\\demoTestCopy\\src\\router\\react-router.tsx":"10","D:\\demoTestCopy\\src\\page\\demo\\reinforc.tsx":"11","D:\\demoTestCopy\\src\\page\\demo\\index.tsx":"12","D:\\demoTestCopy\\src\\page\\demo\\concrete.tsx":"13","D:\\demoTestCopy\\src\\page\\test\\principle.tsx":"14","D:\\demoTestCopy\\src\\page\\demo\\mortar.tsx":"15","D:\\demoTestCopy\\src\\page\\demo\\brick.tsx":"16","D:\\demoTestCopy\\src\\page\\demo\\login\\index.tsx":"17","D:\\demoTestCopy\\src\\page\\demo\\waterproof.tsx":"18","D:\\demoTestCopy\\src\\page\\demo\\switch.tsx":"19","D:\\demoTestCopy\\src\\page\\demo\\query\\index.tsx":"20","D:\\demoTestCopy\\src\\page\\demo\\soil\\index.tsx":"21","D:\\demoTestCopy\\src\\page\\demo\\setting\\index.tsx":"22","D:\\demoTestCopy\\src\\page\\test\\index.tsx":"23","D:\\demoTestCopy\\src\\page\\demo\\sleeve.tsx":"24","D:\\demoTestCopy\\src\\App.js":"25","D:\\demoTestCopy\\src\\utils\\hooks.tsx":"26","D:\\demoTestCopy\\src\\page\\demo\\hooks\\queryEvent.ts":"27","D:\\demoTestCopy\\src\\page\\demo\\soil\\plainSoil.tsx":"28","D:\\demoTestCopy\\src\\page\\demo\\soil\\dust.tsx":"29","D:\\demoTestCopy\\src\\page\\demo\\soil\\ringKnife.tsx":"30","D:\\demoTestCopy\\src\\page\\demo\\setting\\units.tsx":"31","D:\\demoTestCopy\\src\\page\\demo\\setting\\customSetting.tsx":"32","D:\\demoTestCopy\\src\\page\\demo\\setting\\projectCost.tsx":"33","D:\\demoTestCopy\\src\\page\\demo\\component\\Modal.tsx":"34","D:\\demoTestCopy\\src\\page\\demo\\component\\tabel.tsx":"35","D:\\demoTestCopy\\src\\page\\demo\\hooks\\index.tsx":"36","D:\\demoTestCopy\\src\\utils\\request.ts":"37","D:\\demoTestCopy\\src\\page\\demo\\component\\Descriptions.tsx":"38","D:\\demoTestCopy\\src\\page\\demo\\temperature\\index.tsx":"39","D:\\demoTestCopy\\src\\page\\demo\\component\\radio.tsx":"40","D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\style.ts":"41","D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\data.ts":"42","D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\hooks.tsx":"43","D:\\demoTestCopy\\src\\page\\demo\\hooks\\componentHooks.tsx":"44"},{"size":1474,"mtime":1615281016946,"results":"45","hashOfConfig":"46"},{"size":375,"mtime":1614567670485,"results":"47","hashOfConfig":"46"},{"size":1630,"mtime":1614567670488,"results":"48","hashOfConfig":"46"},{"size":358,"mtime":1614567670489,"results":"49","hashOfConfig":"46"},{"size":3010,"mtime":1615276241920,"results":"50","hashOfConfig":"46"},{"size":2632,"mtime":1614567670486,"results":"51","hashOfConfig":"46"},{"size":2049,"mtime":1615280794524,"results":"52","hashOfConfig":"46"},{"size":1334,"mtime":1615276468251,"results":"53","hashOfConfig":"46"},{"size":982,"mtime":1615279344729,"results":"54","hashOfConfig":"46"},{"size":1752,"mtime":1614567670486,"results":"55","hashOfConfig":"46"},{"size":6858,"mtime":1615289536767,"results":"56","hashOfConfig":"46"},{"size":8506,"mtime":1615280473339,"results":"57","hashOfConfig":"46"},{"size":11430,"mtime":1615289634188,"results":"58","hashOfConfig":"46"},{"size":2208,"mtime":1614567670482,"results":"59","hashOfConfig":"46"},{"size":7092,"mtime":1615289708780,"results":"60","hashOfConfig":"46"},{"size":9504,"mtime":1615289820415,"results":"61","hashOfConfig":"46"},{"size":1834,"mtime":1614861702620,"results":"62","hashOfConfig":"46"},{"size":5975,"mtime":1615289870176,"results":"63","hashOfConfig":"46"},{"size":5837,"mtime":1615289744191,"results":"64","hashOfConfig":"46"},{"size":17180,"mtime":1615273402198,"results":"65","hashOfConfig":"46"},{"size":903,"mtime":1614675191743,"results":"66","hashOfConfig":"46"},{"size":6021,"mtime":1615280852589,"results":"67","hashOfConfig":"46"},{"size":1572,"mtime":1614567670482,"results":"68","hashOfConfig":"46"},{"size":5414,"mtime":1615273814361,"results":"69","hashOfConfig":"46"},{"size":553,"mtime":1614567670469,"results":"70","hashOfConfig":"46"},{"size":16271,"mtime":1615280733818,"results":"71","hashOfConfig":"46"},{"size":68767,"mtime":1615263282069,"results":"72","hashOfConfig":"46"},{"size":6179,"mtime":1614657492458,"results":"73","hashOfConfig":"46"},{"size":5608,"mtime":1615279344615,"results":"74","hashOfConfig":"46"},{"size":7023,"mtime":1615207694304,"results":"75","hashOfConfig":"46"},{"size":2269,"mtime":1615280253377,"results":"76","hashOfConfig":"46"},{"size":6519,"mtime":1615277396442,"results":"77","hashOfConfig":"46"},{"size":5750,"mtime":1615278408986,"results":"78","hashOfConfig":"46"},{"size":2326,"mtime":1615276886508,"results":"79","hashOfConfig":"46"},{"size":8618,"mtime":1615276548191,"results":"80","hashOfConfig":"46"},{"size":1925,"mtime":1615289783318,"results":"81","hashOfConfig":"46"},{"size":739,"mtime":1614567670490,"results":"82","hashOfConfig":"46"},{"size":2744,"mtime":1615279571498,"results":"83","hashOfConfig":"46"},{"size":188,"mtime":1614669426596,"results":"84","hashOfConfig":"46"},{"size":770,"mtime":1615276886441,"results":"85","hashOfConfig":"46"},{"size":1247,"mtime":1615277055472,"results":"86","hashOfConfig":"46"},{"size":1689,"mtime":1615278437922,"results":"87","hashOfConfig":"46"},{"size":3589,"mtime":1615280103534,"results":"88","hashOfConfig":"46"},{"size":3052,"mtime":1615276217335,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},"tjpl4s",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},"D:\\demoTestCopy\\src\\index.js",["201","202"],"import React, {Suspense} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { GlobalRouter } from './router/router';\r\nimport routers from './router';\r\nimport { store } from './store/vueStore/index';  // vue3.0 双向数据\r\nimport { Provider, ProviderDa, ProviderHash } from './utils/ContextState'; // 公共context 集\r\nimport State from \"../src/store/vuex/index\";\r\nimport route from \"./router/route\";\r\n// import Test from './page/text'; // 官方指定测试区域\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n      <HashRouter> {/* hash 路由*/}\r\n          <Suspense fallback={ <div>努力加载中 ......</div> }>\r\n              <ProviderDa value={ State }>\r\n                  <Provider value={ store }>\r\n                      {/*<GlobalRouter routerDate={ routers }>// 假路由 exe不适用*/}\r\n                      {/*    <Test/>*/}\r\n                      {/*</GlobalRouter>*/}\r\n                      <ProviderHash route={ route }></ProviderHash> {/* hash 路由*/}\r\n                  </Provider>\r\n              </ProviderDa>\r\n          </Suspense>\r\n      </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n// const\r\n","D:\\demoTestCopy\\src\\reportWebVitals.js",[],"D:\\demoTestCopy\\src\\store\\vueStore\\index.ts",["203","204","205","206"],"import { reactive } from \"@vue/reactivity\";\r\n\r\nexport type StatesData = typeof state.tabelData;\r\n\r\n//测试 count ++\r\nconst changeCount = (): void => {\r\n    state.count += 1;\r\n}\r\n\r\n// 保存setting 数据\r\nfunction changeSetting<T>(states: T) {\r\n    console.log(states)\r\n    state.settingData = states;\r\n}\r\n\r\n// 添加表单数据\r\nfunction addTabelData<T>(states: T) {\r\n    console.log('------------------------------');\r\n    let data = JSON.parse(JSON.stringify(states));\r\n    state.tabelData.push(data);\r\n    localStorage.setItem('tabelData', JSON.stringify(state.tabelData));\r\n}\r\n\r\n// 添加选中表单数据\r\nfunction addCeckTabel<T>(states: T): void {\r\n    console.log('++++++++++++++++++++++++++++++++++')\r\n    console.log(states)\r\n    state.checkTabelData = states;\r\n}\r\n\r\n// 删除表单数据\r\nfunction deleteFormData(newStates: StatesData) {\r\n    state.tabelData = newStates;\r\n}\r\n\r\n// vue3.0特性 + react 测试版 1.0.0\r\nexport interface State {\r\n    count: number,\r\n    settingData: any,\r\n    tabelData: any,\r\n    checkTabelData: any\r\n}\r\n\r\n// store 数据\r\nconst state: State = reactive({\r\n    count: 0,\r\n    settingData: JSON.parse(<string>localStorage.getItem('setData'))? JSON.parse(<string>localStorage.getItem('setData')): {},\r\n    tabelData: JSON.parse(<string>localStorage.getItem('tabelData'))? JSON.parse(<string>localStorage.getItem('tabelData')): [],\r\n    checkTabelData: []\r\n});\r\n\r\n\r\n// 方法集\r\nexport const mutations = {\r\n    changeCount,\r\n    changeSetting,\r\n    addTabelData,\r\n    addCeckTabel,\r\n    deleteFormData\r\n}\r\n\r\n\r\nexport const store = {\r\n    state\r\n}\r\n\r\nexport type Store = typeof store;\r\n","D:\\demoTestCopy\\src\\store\\vuex\\index.ts",["207"],"const store: any = {}\r\n\r\nexport type Store = typeof store;\r\n\r\nexport const useManage = (state: Store, setState: any) => {\r\n    /**\r\n     * 测试组件Context共享数据\r\n     * */\r\n    const add = () => {\r\n        state.count += 1;\r\n        setState(state);\r\n    }\r\n\r\n    return {\r\n        add\r\n    }\r\n}\r\n\r\nexport default {\r\n    store,\r\n    useManage\r\n};\r\n","D:\\demoTestCopy\\src\\router\\route.tsx",[],"D:\\demoTestCopy\\src\\router\\router.tsx",[],"D:\\demoTestCopy\\src\\utils\\ContextState.tsx",[],"D:\\demoTestCopy\\src\\router\\index.tsx",[],"D:\\demoTestCopy\\src\\store\\vueStore\\store.ts",["208"],"import { useRef, useEffect } from \"react\";\r\nimport { useGlobalState } from '../../utils/ContextState';\r\nimport {effect, ReactiveEffect, stop} from \"@vue/reactivity\";\r\nimport { useUpdate } from '../../utils/hooks';\r\n\r\nexport const useStore = (callback: any) => {\r\n    const store = useGlobalState();\r\n    const updateTem = useUpdate();\r\n    const effectBack = effect( () =>\r\n        callback(store),\r\n        {\r\n            scheduler: job => {\r\n                if (job() === undefined) return;\r\n                updateTem();\r\n            },\r\n            lazy: true\r\n        }\r\n    );\r\n    return effectBack();\r\n}\r\n\r\n// 组件挂载后执行\r\nconst useEffectBack = (...param: Parameters<typeof effect>) => {\r\n    const data = useRef<ReactiveEffect>();\r\n    if (!data.current) {\r\n        data.current = effect(...param);\r\n    }\r\n\r\n    const stopEffect = () => {\r\n        stop(data.current!);\r\n    }\r\n\r\n    useEffect(() =>\r\n        stopEffect\r\n    , []);\r\n\r\n    return data.current;\r\n}\r\n","D:\\demoTestCopy\\src\\router\\react-router.tsx",[],"D:\\demoTestCopy\\src\\page\\demo\\reinforc.tsx",["209","210","211","212","213","214"],"D:\\demoTestCopy\\src\\page\\demo\\index.tsx",["215","216","217","218","219","220","221","222","223"]," import React, {memo, useState} from \"react\";\r\nimport { Layout, Menu, List, Input, Button, message } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {Link } from 'react-router-dom';\r\nimport { Routes } from '../../router/route';\r\nimport {DateDiff, useGetTime, useMount} from \"../../utils/hooks\";\r\nimport { MaturityModal } from \"./component/Modal\";\r\n import styled from \"styled-components\";\r\n import {useStore} from \"../../store/vueStore/store\";\r\n import {Store} from \"../../store/vueStore\";\r\nconst {renderRoutes} = require('react-router-config');\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n//修改温度\r\nconst ChangeTemperature = styled.div`\r\n    position: fixed;\r\n    top: 15px;\r\n    right: 100px;\r\n    \r\n    &>div {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n`\r\n\r\nconst Home: React.FC = ({ route }: Routes | any) => {\r\n    // 砂浆 弹框\r\n    const { showModal, Modals } = MaturityModal();\r\n    // 混泥土弹框\r\n    const { showModal: concreteShowModal, Modals: ConcreteModal } = MaturityModal();\r\n    // 砂浆到期时间列表\r\n    const [dueTime, setDueTime] = useState<any>([]);\r\n    //混泥土到期时间列表\r\n    const [concreteDueTime, setConcreteDueTime] = useState<any>([]);\r\n    const time = useGetTime();\r\n    let tabelData: string | null = localStorage.getItem('tabelData');\r\n\r\n    useMount(() => {\r\n        if (tabelData != null) {\r\n            const data = JSON.parse(tabelData);\r\n            // 砂浆列表\r\n            const dueTimes = [...dueTime];\r\n            // 混泥土列表\r\n            const concreteDueTimes = [...concreteDueTime];\r\n            data.map((res: typeof data, ind: number) => {\r\n                // 处理砂浆到期提示 小于3天\r\n                if (res.keyName === \"mortar\") {\r\n                    if (DateDiff(time, res.experimentalDate) <= 3) {\r\n                        console.log(\"_________________________\")\r\n                        const obj = res;\r\n                        obj.id = (ind + 1);\r\n                        obj.dateDiff = DateDiff(time, res.experimentalDate);\r\n                        dueTimes.push(obj);\r\n                        setDueTime(dueTimes);\r\n                        showModal();\r\n                    }\r\n                }\r\n                // 处理 混泥土\r\n                if (res.keyName === \"concrete\") {\r\n                    if (res.maintenance === \"标准养护\" || res.maintenance === \"拆模同条件养护\") {\r\n                        if (DateDiff(time, res.experimentalDate) <= 3) {\r\n                            const obj = res;\r\n                            obj.id = (ind + 1);\r\n                            obj.dateDiff = DateDiff(time, res.experimentalDate);\r\n                            concreteDueTimes.push(obj);\r\n                            setConcreteDueTime(concreteDueTimes);\r\n                            concreteShowModal();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (res.temp >= 550) {\r\n                            console.log('++++++++++++++++++++++')\r\n                            const obj = res;\r\n                            obj.id = (ind + 1);\r\n                            obj.dateDiff = res.temp;\r\n                            concreteDueTimes.push(obj);\r\n                            setConcreteDueTime(concreteDueTimes);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <BackLayout route={ route.children }>\r\n            {/*砂浆弹框*/}\r\n            <Modals title=\"砂浆到期提示框\" width={1000}>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={dueTime}\r\n                    renderItem={(item: typeof dueTime) => (\r\n                        <List.Item>\r\n                            <List.Item.Meta\r\n                                title={<a href=\"https://ant.design\">{\"序号：\" + item.id + \"类型：\" + (item.keyName==\"mortar\"?\"砂浆\": \"\") + \"还有\" + item.dateDiff + \"天到期\"}</a>}\r\n                                description={ JSON.stringify(item) }\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Modals>\r\n            {/*混泥土弹框*/}\r\n            <ConcreteModal title=\"混泥土到期提示框\" width={1000}>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={concreteDueTime}\r\n                    renderItem={(item: typeof concreteDueTime) => (\r\n                        <List.Item>\r\n                            <List.Item.Meta\r\n                                title={<a href=\"https://ant.design\">{\"序号：\" + item.id + \"类型：\" + (item.keyName==\"concrete\"?\"混泥土\": \"\") + (item.maintenance == \"同条件养护\"? item.temp + \"度\" :(\"还有\" + item.dateDiff + \"天到期\"))}</a>}\r\n                                description={ JSON.stringify(item) }\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </ConcreteModal>\r\n            {renderRoutes(route.children)}\r\n        </BackLayout>\r\n    );\r\n}\r\n\r\nconst BackLayout = ({ children, route }: any) => {\r\n    const [val, setVal] = useState<string>( '0' );\r\n\r\n    const data = useStore((store: Store) => {\r\n        const { tabelData, checkTabelData, settingData } = store.state;\r\n        return {\r\n            tabelData,\r\n            checkTabelData,\r\n            settingData\r\n        }\r\n    });\r\n    const [tabelData, setTabelData] = useState(data.tabelData);\r\n\r\n    let time = useGetTime();\r\n    // 修改温度\r\n    function changeTemp () {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        setVal(e.target.value);\r\n    }\r\n\r\n    const addTemp = () => {\r\n        const arr = [...tabelData];\r\n        arr.map((res) => {\r\n            if (res.maintenance == \"同条件养护\") {\r\n                console.log(\"************************\", res.temp)\r\n                res.temp = Number(res.temp) +  Number(val);\r\n            }\r\n        });\r\n        setTabelData(arr);\r\n        message.success('修改成功, 刷新页面同步哦');\r\n        localStorage.setItem(\"tabelData\", JSON.stringify(arr));\r\n    }\r\n\r\n    // 提交温度\r\n    const submitTemp = () => {\r\n        if (val && val == '0') {\r\n            message.warning('请输入修改值');\r\n        }\r\n        else {\r\n            const temp = localStorage.getItem('changeTemp');\r\n            if (!temp) {\r\n                localStorage.setItem('changeTemp', time);\r\n                addTemp()\r\n            }\r\n            else {\r\n                if (temp == time) {\r\n                    message.warning('今日已修改');\r\n                }\r\n                else {\r\n                    localStorage.setItem('changeTemp', time);\r\n                    addTemp()\r\n                }\r\n            }\r\n        }\r\n        const input = document.getElementById('tempInput');\r\n        // @ts-ignore\r\n        input.value = \"\";\r\n    }\r\n\r\n\r\n    return (\r\n        <Layout style={{ height: '100%' }}>\r\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n                <div className=\"logo\" />\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\r\n                    {\r\n                        route.map((res: Routes, ind: number) => {\r\n                            return (\r\n                                <Menu.Item key={ind}>\r\n                                    <Link to={`${ res.path }`}>{ res.name }</Link>\r\n                                </Menu.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                </Menu>\r\n                <ChangeTemperature>\r\n                    <div>\r\n                        <Input placeholder=\"输入今日温度值\" id=\"tempInput\"  onChange={changeTemp}/>\r\n                        <Button onClick={submitTemp}>温度录入</Button>\r\n                    </div>\r\n                </ChangeTemperature>\r\n            </Header>\r\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64, height: '100%' }}>\r\n                <div className=\"site-layout-background\" style={{ padding: 24, minHeight: '80%'}}>\r\n                    { children }\r\n                </div>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default memo(Home);\r\n","D:\\demoTestCopy\\src\\page\\demo\\concrete.tsx",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246"],"D:\\demoTestCopy\\src\\page\\test\\principle.tsx",["247","248","249","250","251","252","253","254","255"],"import React, {Attributes, ComponentClass, FunctionComponent, memo, ReactElement, ReactNode} from \"react\";\r\nimport {useCreated, useMount} from \"../../utils/hooks\";\r\nimport { Renderer } from 'react-dom';\r\n\r\nconst RenderPrinciple = () => {\r\n    // console.log(React.createElement('a', null, 'asdasd'))\r\n\r\n    useMount(() => {\r\n        renderElement(A(), document.getElementById(\"test\"));\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div>father</div>\r\n            <p>childern</p>\r\n            <div id=\"test\">\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst A = () => {\r\n\r\n    const clickTest = () => {\r\n        console.log('我被点击了')\r\n    }\r\n\r\n    const blurTest = () => {\r\n        console.log('我失去焦点了')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>我是p</p>\r\n            <span>我是span</span>\r\n            <button onClick={clickTest} onBlur={blurTest}>莫挨老子</button>\r\n            {/*{*/}\r\n            {/*    React.createElement()*/}\r\n            {/*}*/}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction renderElement<T>(vnode: any, root: any) {\r\n    console.log(vnode)\r\n    console.log(vnode.constructor)\r\n    console.log(vnode.type)\r\n    let element: any;\r\n    if (vnode.constructor !== Object) { // 非标签处理\r\n        element = document.createTextNode(vnode);\r\n    }\r\n    else { // 标签处理\r\n        element = document.createElement(vnode.type);\r\n\r\n        Object.keys(vnode.props).map(res => { // 遍历节点props\r\n            if (res === 'children') {\r\n                if (vnode.props.children.constructor !== Array) { // 不存在子节点\r\n                    element.innerHTML = vnode.props.children;\r\n                }\r\n                else { // 存在递归\r\n                    vnode.props.children.map((res: Renderer )=> {\r\n                        renderElement(res, root);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                const eventType = res.slice(2, res.length).toLowerCase(); // 分割事件\r\n                element.addEventListener(eventType, vnode.props[res]); // 绑定事件\r\n            }\r\n        });\r\n    }\r\n    root.appendChild(element);\r\n}\r\n\r\nexport default memo(RenderPrinciple);\r\n","D:\\demoTestCopy\\src\\page\\demo\\mortar.tsx",["256","257","258","259","260","261"],"D:\\demoTestCopy\\src\\page\\demo\\brick.tsx",["262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283"],"D:\\demoTestCopy\\src\\page\\demo\\login\\index.tsx",["284","285","286","287"],"import React, { memo, useState } from \"react\";\r\nimport { message } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport \"./index.css\";\r\n\r\n\r\nconst Login = (props: any) => {\r\n    const [passworld, setPassWord] = useState<number | string>();\r\n\r\n    function inputChange () {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        console.log(e.target.value);\r\n        setPassWord(e.target.value);\r\n    }\r\n\r\n    const TestRequest = () => {\r\n        console.log(123)\r\n        let url = \"password.json\"/*json文件url，本地的就写本地的位置，如果是服务器的就写服务器的路径*/\r\n        let request = new XMLHttpRequest();\r\n        console.log(window.history)\r\n        request.open(\"get\", 'password.json');/*设置请求方法与路径*/\r\n        request.send(null);/*不发送数据到服务器*/\r\n        request.onload = function () {/*XHR对象获取到返回信息后执行*/\r\n            if (request.status == 200) {/*返回状态为200，即为数据获取成功*/\r\n                let json = JSON.parse(request.response);\r\n                console.log(json);\r\n                if (json.password == passworld) {\r\n                    props.history.push('/Home/reinforc')\r\n                }\r\n                else {\r\n                    console.log(123123123)\r\n                    message.error('密码错了哦');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h1>登录</h1>\r\n            <form>\r\n                <input type=\"password\" name=\"p\" onInput={inputChange} placeholder=\"Password\"  />\r\n                <p></p>\r\n                <button type=\"button\" className=\"btn btn-primary btn-block btn-large\" onClick={TestRequest}>登录</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Login);","D:\\demoTestCopy\\src\\page\\demo\\waterproof.tsx",["288","289","290","291"],"D:\\demoTestCopy\\src\\page\\demo\\switch.tsx",["292","293","294","295"],"D:\\demoTestCopy\\src\\page\\demo\\query\\index.tsx",["296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332"],"import React, {memo, useState} from \"react\";\r\nimport {Button, DatePicker, Input, Select} from 'antd';\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {Store} from \"../../../store/vueStore\";\r\nimport TableDa from \"../component/tabel\";\r\nimport {detailsDataKey} from \"../component/Descriptions\";\r\nimport {useQueryEvent} from \"../hooks/queryEvent\";\r\nimport { useRadio } from \"../component/radio\";\r\nimport {\r\n    useChangeDoc,\r\n    NumberOrders,\r\n    isExportLocal,\r\n    useNewExportExcel,\r\n    useInportExcel,\r\n    separateWprldArray\r\n} from \"../../../utils/hooks\";\r\nimport moment from \"_moment@2.29.1@moment\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FileDefaultDel = styled.div`\r\n    width: 90px;\r\n    height: 30px;\r\n    position: relative;\r\n    display: inline-block;\r\n    \r\n    &>input {\r\n        width: 90px;\r\n        height: 30px;\r\n        opacity: 0;\r\n        position: absolute;\r\n        top: 0;\r\n        z-index: 10;\r\n    }\r\n    \r\n    Button {\r\n        width: 90px;\r\n        height: 30px;\r\n    }\r\n`;\r\n\r\nconst type = [\r\n    {key: 'reinforc', val: '钢筋原料'}, {key: 'concrete', val: '混泥土'},\r\n    {key: 'mortar', val: '砂浆'}, {key: 'switch', val: '电渣压力焊'}, {key: 'sleeve', val: '直螺纹套筒'},\r\n    {key: 'brick', val: '砖'}, {key: 'waterproof', val: '防水卷材'}, {key: 'soil', val: '土'}];\r\n\r\nexport default memo((message?: any) => {\r\n    const data = useStore((store: Store) => {\r\n        const {tabelData, checkTabelData, settingData} = store.state;\r\n        return {\r\n            tabelData,\r\n            checkTabelData,\r\n            settingData\r\n        }\r\n    });\r\n    const [tabelData, setTabelData] = useState(data.tabelData);\r\n    //world 输出\r\n    const {state, changeDoc} = useChangeDoc();\r\n    // 对应模板数据\r\n    const {multipleCol, dealWithWater, switchWorld, concreteWorld, mortarWorld, permeabilityWorld} = useQueryEvent();\r\n    // 筛选时间\r\n    const [timeVal, setTimeVal] = useState<any>();\r\n    // 筛选部位\r\n    const [partsVal, setPartsVal] = useState<string>();\r\n    //项目\r\n    // const [project, setProject] = useState(null);\r\n    // 见证人员\r\n    const [witnessVal, setWitnessVal] = useState<string>();\r\n\r\n    const {exportExcel} = useNewExportExcel();\r\n\r\n    const {  value: radiosVal, setValue: setRadiosVal,  Radios } = useRadio();\r\n\r\n    const {uploadExcel} = useInportExcel([tabelData, setTabelData]);\r\n\r\n    // 过滤\r\n    function filter<T extends []>(data: T, key: string) {\r\n        // 清空筛选条件\r\n        setTimeVal(null);\r\n        setPartsVal('');\r\n        // timeRef.current.props.onChange();\r\n        let arr: any = [];\r\n        data.map((res: any) => {\r\n            if (res.keyName === key) {\r\n                arr.push(res);\r\n            } else if ((res.keyName === \"dust\" || res.keyName === \"plainSoil\" || res.keyName === \"ringKnife\") && key === \"soil\") {\r\n                arr.push(res);\r\n            }\r\n        });\r\n        setTabelData([]);\r\n        setTimeout(() => {\r\n            setTabelData(arr);\r\n        }, 200);\r\n    }\r\n\r\n    // 养护条件\r\n    function curingConditions (val: any) {\r\n        let arr: typeof tabelData = [];\r\n        data.tabelData.map((res: any) => {\r\n            // if (!partsVal && !timeVal && !project && !witnessVal) {\r\n            if (!partsVal && !timeVal && !witnessVal) {\r\n                if (res.maintenance == val) {\r\n                    arr.push(res);\r\n                }\r\n            } else {\r\n                // if (res.maintenance == val && (res.time == timeVal || res.useParts.includes(partsVal) || res.projectClass === (project)|| res.witnessPersonne == witnessVal)) {\r\n                if (res.maintenance == val && (res.time == timeVal || res.useParts.includes(partsVal) || res.witnessPersonne == witnessVal)) {\r\n                    arr.push(res);\r\n                }\r\n            }\r\n        });\r\n\r\n        setTabelData([]);\r\n        setTimeout(() => {\r\n            setTabelData(arr);\r\n        }, 200)\r\n    }\r\n\r\n    // 单导出\r\n    const exportData = (): void => {\r\n        const key = data.checkTabelData;\r\n        Object.keys(key).map((res, ind) => {\r\n\r\n            let da: typeof data.tabelData = {};  // 导出数据存储\r\n            if (key && key[res].constructor == Array) {\r\n                // 获取名称\r\n                let documentName = res;\r\n                let listCmr: any = [];\r\n                console.log(key[res])\r\n                key[res].map((resInd: any, index: number) => {\r\n\r\n                    // 傻逼抗渗\r\n                    if (documentName === \"permeability\") {\r\n\r\n                        if (key[res].length < 3) {\r\n                            let data = permeabilityWorld(resInd, resInd.index, da, 0, 2);\r\n\r\n                            // 当外层循环执行完时触发 --- 防止多次触发\r\n                            if (index == key[res].length - 1) {\r\n                                // 导出\r\n                                isExportLocal(data, [tabelData, setTabelData]);\r\n                                const dataList = NumberOrders(documentName, data, [tabelData, setTabelData]);\r\n                                changeDoc(documentName + '.docx', dataList);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.log(index)\r\n                            for (let i = 0; i < Math.floor((index) / 2) + 1; i++) {\r\n                                console.log(i)\r\n                                // 获取每次循环拿到的数据\r\n                                listCmr.push(permeabilityWorld(resInd, resInd.index, da, i, 2));\r\n                            }\r\n                            console.log(listCmr)\r\n                            console.log(separateWprldArray(listCmr))\r\n                            // 当外层循环执行完时触发 --- 防止多次触发\r\n                            if (index == key[res].length - 1) {\r\n                                separateWprldArray(listCmr).map((res: any) => {\r\n                                    isExportLocal(res, [tabelData, setTabelData]);\r\n                                    const dataList = NumberOrders(documentName, res, [tabelData, setTabelData]);\r\n                                    // changeDoc(documentName + '.docx', dataList);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    // 抗渗 end\r\n                    // 环刀开始\r\n                    else if (documentName === \"ringKnife\") {\r\n                        changeDoc(documentName + '.docx', resInd);\r\n                    } else {\r\n                        // 数据小于 3的时候 一份维拓\r\n                        if (key[res].length < 4) {\r\n                            let data;\r\n                            if (documentName === \"reinforc\" || documentName === \"sleeve\" || documentName === \"switch\" || documentName === \"waterproof\" || documentName === \"sleeve\" || documentName === \"brick\") {\r\n                                data = switchWorld(resInd, index, da, 0);\r\n                            } else if (documentName === \"concrete\") {\r\n                                data = concreteWorld(resInd, index, da, 0);\r\n                            } else if (documentName === \"mortar\") {\r\n                                data = mortarWorld(resInd, index, da, 0);\r\n                            } else  {\r\n                                data = multipleCol(resInd, index, da);\r\n                            }\r\n                            // 当外层循环执行完时触发 --- 防止多次触发\r\n                            if (index == key[res].length - 1) {\r\n                                // 导出\r\n                                isExportLocal(data, [tabelData, setTabelData]);\r\n                                const dataList = NumberOrders(documentName, data, [tabelData, setTabelData]);\r\n                                documentName != \"permeability\" && changeDoc(documentName + '.docx', dataList);\r\n                            }\r\n                        }\r\n                        // 反之多张数据\r\n                        else {\r\n                            // 判断导出几次\r\n                            for (let i = 0; i < Math.floor((index) / 3) + 1; i++) {\r\n                                // 获取每次循环拿到的数据\r\n                                let dacmr;\r\n                                if (documentName === \"ringKnife\" || documentName === \"plainSoil\") {\r\n                                    listCmr.push(dealWithWater(resInd, resInd.index, da, i));\r\n                                } else if (documentName == \"switch\" || documentName === \"reinforc\" || documentName === \"sleeve\" || documentName === \"waterproof\"  || documentName === \"brick\") {\r\n                                    listCmr.push(switchWorld(resInd, index, da, i))\r\n                                } else if (documentName === \"concrete\") {\r\n                                    listCmr.push(concreteWorld(resInd, index, da, i));\r\n                                } else if (documentName === \"mortar\") {\r\n                                    listCmr.push(mortarWorld(resInd, index, da, i));\r\n                                } else  {\r\n                                    dacmr = multipleCol(resInd, index, da, i);\r\n                                }\r\n                            }\r\n\r\n                            // 当外层循环执行完时触发 --- 防止多次触发\r\n                            if (index == key[res].length - 1) {\r\n                                separateWprldArray(listCmr).map((res: any) => {\r\n                                    isExportLocal(res, [tabelData, setTabelData]);\r\n                                    const dataList = NumberOrders(documentName, res, [tabelData, setTabelData]);\r\n                                    documentName != \"permeability\" && changeDoc(documentName + '.docx', dataList);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // 筛选时间\r\n    function screenTime<T>(date: T, dateString: string) {\r\n        let tim = moment(dateString);\r\n        setTimeVal(tim);\r\n\r\n        let arr: typeof tabelData = [];\r\n        const checkTime = dateString;\r\n        data.tabelData.map((res: any) => {\r\n            // if (partsVal && res.useParts.includes(partsVal)) {\r\n            // if (!partsVal && !project && !witnessVal && !radiosVal) {\r\n            if (!partsVal && !witnessVal && !radiosVal) {\r\n                if (res.time == checkTime) {\r\n                    console.log(res)\r\n                    arr.push(res);\r\n                }\r\n            } else {\r\n                // if (res.time == checkTime && (res.useParts.includes(partsVal) || res.projectClass === (project) || res.witnessPersonne == witnessVal || res.maintenance == radiosVal)) {\r\n                if (res.time == checkTime && (res.useParts.includes(partsVal) || res.witnessPersonne == witnessVal || res.maintenance == radiosVal)) {\r\n                    console.log(res)\r\n                    arr.push(res);\r\n                }\r\n            }\r\n        });\r\n        setTabelData([]);\r\n        setTimeout(() => {\r\n            setTabelData(arr);\r\n        }, 200)\r\n    }\r\n\r\n    // 筛选部位\r\n    function screeningParts<T>({target}: any) {\r\n        const val: string = target.value;\r\n        setPartsVal(val);\r\n\r\n        let arr: typeof tabelData = [];\r\n        console.log(val, arr, tabelData, radiosVal)\r\n        data.tabelData.map((res: any) => {\r\n            // if (!project && !timeVal && !witnessVal && !radiosVal) {\r\n            if (!timeVal && !witnessVal && !radiosVal) {\r\n                if (res.useParts.includes(val)) {\r\n                    console.log(res);\r\n                    arr.push(res);\r\n                }\r\n            } else {\r\n                // if (res.useParts.includes(val) && (res.time == timeVal || res.projectClass === (project) || res.witnessPersonne == witnessVal || res.maintenance == radiosVal)) {\r\n                if (res.useParts.includes(val) && (res.time == timeVal || res.witnessPersonne == witnessVal || res.maintenance == radiosVal)) {\r\n                    console.log(res)\r\n                    arr.push(res);\r\n                }\r\n            }\r\n        });\r\n\r\n        setTabelData([]);\r\n        setTimeout(() => {\r\n            setTabelData(arr);\r\n        }, 200)\r\n    }\r\n\r\n    // 见证人员\r\n    const changeSelectWitness = (ind: number, option: any) => {\r\n        const val: string = option.value;\r\n        setWitnessVal(val);\r\n\r\n        let arr: typeof tabelData = [];\r\n        data.tabelData.map((res: any) => {\r\n            console.log(res, val)\r\n            // if (!partsVal && !timeVal && !project && !radiosVal) {\r\n            if (!partsVal && !timeVal && !radiosVal) {\r\n                if (res.witnessPersonne == val) {\r\n                    console.log(res.witnessPersonne);\r\n                    arr.push(res);\r\n                }\r\n            } else {\r\n                if (res.witnessPersonne == witnessVal && (res.time == timeVal || res.useParts.includes(partsVal) || res.maintenance == radiosVal)) {\r\n                // if (res.witnessPersonne == witnessVal && (res.time == timeVal || res.useParts.includes(partsVal) || res.projectClass === (project) || res.maintenance == radiosVal)) {\r\n                    console.log(res)\r\n                    arr.push(res);\r\n                }\r\n            }\r\n        });\r\n\r\n        setTabelData([]);\r\n        setTimeout(() => {\r\n            setTabelData(arr);\r\n        }, 200)\r\n    }\r\n\r\n    // 筛选项目\r\n    // const changeSelectProject = (ind: number, option: any) => {\r\n    //     console.log(option, ind)\r\n    //     setProject(option.value);\r\n    //\r\n    //     let arr: typeof tabelData = [];\r\n    //     data.tabelData.map((res: any) => {\r\n    //         if (!partsVal && !timeVal && !witnessVal && !radiosVal) {\r\n    //             if (res.projectClass === (option.value)) {\r\n    //                 console.log(res);\r\n    //                 arr.push(res);\r\n    //             }\r\n    //         } else {\r\n    //             if (res.projectClass === (option.value) && (res.time == timeVal || res.useParts.includes(partsVal) || res.witnessPersonne == witnessVal || res.maintenance == radiosVal)) {\r\n    //                 console.log(res)\r\n    //                 arr.push(res);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    //\r\n    //     setTabelData([]);\r\n    //     setTimeout(() => {\r\n    //         setTabelData(arr);\r\n    //     }, 200)\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            我是查询界面\r\n            <label htmlFor=\"\">查询条件</label>\r\n            <p>类型:\r\n                {\r\n                    type.map(res => <Button key={res.key} onClick={() => filter(data.tabelData, res.key)}>{res.val}</Button>)\r\n                }\r\n                <Button onClick={() => {\r\n                    setTabelData(data.tabelData);\r\n                    // setProject(undefined);\r\n                    setPartsVal(undefined);\r\n                    setTimeVal(undefined);\r\n                    setRadiosVal(undefined);\r\n                }}>全部</Button>\r\n            </p>\r\n            <p>时间: <DatePicker format=\"YYYY-MM-DD\" onChange={screenTime} value={timeVal}/>\r\n                <span>养护条件：\r\n                   <Radios data={[{\"val\": \"标准养护\", \"key\": \"0\"}, {\"val\": \"同条件养护\", \"key\": \"1\"}, {\"val\": \"拆模同条件养护\", \"key\": \"2\"}]}\r\n                   callBack={curingConditions}></Radios>\r\n                </span>\r\n            </p>\r\n            <p>部位: <Input onChange={screeningParts} value={partsVal}/></p>\r\n            <p>\r\n                {/*项目：*/}\r\n                {/*<Select onChange={changeSelectProject}>*/}\r\n                {/*    {data.settingData.projectClasss && data.settingData.projectClasss.constructor == Array && data.settingData.projectClasss.map((res: number | string) =>*/}\r\n                {/*        <Select.Option value={res} key={res}>{res}</Select.Option>)}*/}\r\n                {/*</Select>*/}\r\n                见证人员：\r\n                <Select onChange={changeSelectWitness}>\r\n                    {data.settingData.witnessPersonnel && data.settingData.witnessPersonnel.constructor == Array && data.settingData.witnessPersonnel.map((res: number | string) =>\r\n                        <Select.Option value={res} key={res}>{res}</Select.Option>)}\r\n                </Select>\r\n            </p>\r\n            <button onClick={exportData}>导出world</button>\r\n            <FileDefaultDel>\r\n                <input className={styles['file-uploader']} type='file' accept='.xlsx, .xls' onChange={uploadExcel}/>\r\n                <Button className={styles['upload-text']}>上传Execl</Button>\r\n            </FileDefaultDel>\r\n            <Button onClick={() => exportExcel(tabelData, detailsDataKey)}>导出Execl</Button>\r\n            <TableDa tabel={[tabelData, setTabelData]}/>\r\n        </>\r\n    );\r\n});\r\n\r\nlet styles = {\r\n    'file-uploader': 'height:30px',\r\n    'upload-text': 'height:30px',\r\n    'upload-tip': 'display:block'\r\n}","D:\\demoTestCopy\\src\\page\\demo\\soil\\index.tsx",[],"D:\\demoTestCopy\\src\\page\\demo\\setting\\index.tsx",["333","334","335","336","337","338","339"],"import React, {memo, useRef, useState} from \"react\";\r\nimport {Button, Descriptions, Form, Input, message} from \"antd\";\r\nimport {useCreated, useUpdata} from \"../../../utils/hooks\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {Store, mutations} from \"../../../store/vueStore\";\r\nimport CustomSetting from \"./customSetting\";\r\nimport Units from \"./units\";\r\nimport ProjectCost from \"./projectCost\";\r\nimport {Modals} from \"../component/Modal\";\r\nimport {ManufacturerStyle, ModalsContext, DetailsSetup} from \"./resources/style\";\r\nimport { setupData } from \"./resources/data\";\r\nimport { useSetTing } from \"./resources/hooks\"\r\n\r\nconst Setting = () => {\r\n        const formTabel: any = useRef(null);\r\n        const [localData, localSetData] = useState<string | null>(null);\r\n        const [state, setState] = useState<number>(0);\r\n        const data = useStore((store: Store) => {\r\n            const { state } = store;\r\n            const { settingData } = state;\r\n            return {\r\n                settingData\r\n            }\r\n        });\r\n\r\n        useCreated(() => {\r\n            if (formTabel && formTabel.current != null) {\r\n                const localStorageData: string | null = localStorage.getItem('setData');\r\n                console.log(formTabel)\r\n                formTabel.current.setFieldsValue(data.settingData);\r\n\r\n                localSetData(localStorageData);\r\n            }\r\n        });\r\n\r\n        useUpdata(localData, () => {\r\n            if (formTabel != null) {\r\n                if (localData !== null) {\r\n                    if (typeof localData === \"string\") {\r\n                        mutations.changeSetting(JSON.parse(localData));\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        const Context = () => {\r\n        const formTab: any = useRef(null);\r\n        const [state, setState] = useState<boolean>(false);\r\n        const { manufacturerInput, deleteManufacturer, addManufacturer, manufacturerTotalDa, renderTem } = useSetTing(formTab);\r\n\r\n        // 提交表单\r\n        const onFinish = (values: any) => {\r\n            let dataValue = Object.assign(data.settingData, values)\r\n            mutations.changeSetting(dataValue);\r\n            localStorage.setItem('setData', JSON.stringify(dataValue));\r\n            message.success('修改成功');\r\n            setState(true)\r\n        };\r\n\r\n        const renderDescribe = () => {\r\n            return (\r\n                <>\r\n                    <DetailsSetup>\r\n                        <div >\r\n                            <Descriptions>\r\n                                {\r\n                                    setupData.map(res => (\r\n                                        <Descriptions.Item label={ res.val } key={res.key}>{ data.settingData[res.key] }</Descriptions.Item>\r\n                                    ))\r\n                                }\r\n                            </Descriptions>\r\n                        </div>\r\n                        <Form {...layout} ref={ formTabel } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                            {\r\n                                setupData.map(res => {\r\n                                    return (\r\n                                        <ManufacturerStyle key={res.key}>\r\n                                            <div>\r\n                                                <Form.Item name={res.key} label={res.val} >\r\n                                                    { res.type?<Input />: <Input readOnly /> }\r\n                                                </Form.Item>\r\n                                            </div>\r\n                                            { res.type?\"\": (\r\n                                                <Modals>\r\n                                                    <ModalsContext>\r\n                                                        { renderTem(res) }\r\n                                                    </ModalsContext>\r\n                                                </Modals>\r\n                                            ) }\r\n\r\n                                        </ManufacturerStyle>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    确认提交\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </DetailsSetup>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                { renderDescribe() }\r\n            </>\r\n        );\r\n    }\r\n\r\n        const renderList = () => {\r\n            if (state === 0) {\r\n                return <CustomSetting/>\r\n            }\r\n            else if (state === 1) {\r\n                return <Units/>\r\n            }\r\n            else if (state == 2) {\r\n                return <ProjectCost/>\r\n            }\r\n            else {\r\n                return <Context></Context>\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                设置公共区域\r\n                <p>\r\n                    <Button type={state===0?'primary': 'default'} onClick={()=>setState(0)}>生产及供销单位</Button>\r\n                    <Button type={state===1?'primary': 'default'} onClick={()=>setState(1)}>单位相关配置</Button>\r\n                    {/*<Button type={state===2?'primary': 'default'} onClick={()=>setState(2)}>工程配置</Button>*/}\r\n                    <Button type={state===3?'primary': 'default'} onClick={()=>setState(3)}>主体</Button>\r\n                </p>\r\n\r\n                { renderList() }\r\n            </>\r\n        );\r\n}\r\n\r\nexport default memo(Setting);\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};","D:\\demoTestCopy\\src\\page\\test\\index.tsx",["340","341"],"import React, {memo, ReactComponentElement, ReactDOM, useState,} from \"react\";\r\n\r\nconst Test = () => {\r\n\r\n    return (\r\n        <>\r\n            { useTestHocChild(useTestHoc(Test2))() }\r\n            { useTestHocChild(Test2)() }\r\n            <div>我是测试</div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Test2 = ({state, setState, testInput, val}: any) => {\r\n    return (\r\n        <>\r\n            <p>{ state===false?'false': 'true' }</p>\r\n            <button onClick={()=>{\r\n                setState(false);}}>点我false</button>\r\n            <button onClick={()=>{\r\n                setState(true)}}>点我true</button>\r\n            { val }\r\n            <input type=\"text\" onInput={testInput} value={val}/>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n// Hoc 模式\r\nfunction useTestHoc(WrappedComponent: any) {\r\n    const useA = (props: any) => {\r\n        console.log(props)\r\n        const [state, setState] = useState<boolean>(false);\r\n        const newProps = {\r\n            state,\r\n            setState,\r\n            ...props\r\n        }\r\n\r\n        return  <WrappedComponent {...newProps}/>\r\n\r\n    }\r\n    return useA;\r\n}\r\n\r\nfunction useTestHocChild(Component: any) {\r\n    console.log(Component)\r\n    const useB = () => {\r\n        const [val, setValue] = useState<number | string>();\r\n        // console.log(props)\r\n        function testInput(e: any) {\r\n            setValue(e.target.value);\r\n        }\r\n\r\n        const newState ={\r\n            val,\r\n            testInput\r\n        }\r\n\r\n        return <Component {...newState} />\r\n    }\r\n\r\n    return useB;\r\n}\r\n\r\nexport default memo(Test);\r\n","D:\\demoTestCopy\\src\\page\\demo\\sleeve.tsx",["342","343","344","345","346"],"import React, {memo, useRef} from \"react\";\r\nimport {Select, Button, Form, Input, DatePicker} from 'antd';\r\nimport { useCreated, useGetTime} from \"../../utils/hooks\";\r\nimport { useSleeve } from \"./hooks/index\";\r\nimport moment from \"_moment@2.29.1@moment\";\r\nimport {useStore} from \"../../store/vueStore/store\";\r\nimport {Store} from \"../../store/vueStore\";\r\n\r\n// 等级\r\nconst Level: string[] = ['HPB235', 'HPB300', 'HRB335', 'HRB335E', 'HRB400', 'HRB400E', 'HRB500', 'HRB500E'];\r\n\r\n// sleeve  直螺纹套筒\r\nconst Sleeve = () => {\r\n    const formTab: any = useRef(null);\r\n    const time = useGetTime();\r\n    const {state, perform} = useSleeve();\r\n\r\n    const data = useStore((store: Store) => {\r\n        const { state } = store;\r\n        const { settingData } = state;\r\n        return {\r\n            settingData\r\n        }\r\n    });\r\n\r\n    useCreated(() => {\r\n        if (formTab != null) {\r\n            formTab.current.setFieldsValue({time: moment(time)})\r\n        }}\r\n    );\r\n\r\n    const onFinish = (values: any) => {\r\n        perform(values);\r\n    };\r\n\r\n    const creatGroupNum = (e: any) => {\r\n        const num = e.target.value/500;\r\n        formTab.current.setFieldsValue({groupNum: num});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            我是直螺纹套筒\r\n            <Form {...layout} ref={ formTab } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages} >\r\n                <Form.Item name={'level'} label=\"等级\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            Level.map(res =>\r\n                                <Select.Option value={res} key={res}>{ res }</Select.Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'manufacturer'} label=\"生产厂家\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.sleeveMaterial && data.settingData.sleeveMaterial.constructor == Array && data.settingData.sleeveMaterial.map((res: number| string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'specification'} label=\"规格\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        <Select.Option value=\"14\">14</Select.Option>\r\n                        <Select.Option value=\"16\">16</Select.Option>\r\n                        <Select.Option value=\"18\">18</Select.Option>\r\n                        <Select.Option value=\"20\">20</Select.Option>\r\n                        <Select.Option value=\"22\">22</Select.Option>\r\n                        <Select.Option value=\"25\">25</Select.Option>\r\n                        <Select.Option value=\"28\">28</Select.Option>\r\n                        <Select.Option value=\"32\">32</Select.Option>\r\n                        <Select.Option value=\"35\">35</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'usingScopeParts'} label=\"部位范围\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.usingScopePartsList && data.settingData.usingScopePartsList.constructor == Array && data.settingData.usingScopePartsList.map((res: number | string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useParts'} label=\"具体部位\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'batch'} label=\"批量\" rules={[{ required: true }]}>\r\n                    <Input onClick={creatGroupNum} onInput={creatGroupNum}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'time'} label=\"日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                {/*<Form.Item name={'projectClass'} label=\"项目分类\">*/}\r\n                {/*    <Select>*/}\r\n                {/*        { data.settingData.projectClasss && data.settingData.projectClasss.constructor == Array && data.settingData.projectClasss.map((res: number| string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }*/}\r\n                {/*    </Select>*/}\r\n                {/*</Form.Item>*/}\r\n\r\n                <Form.Item name={'witnessPersonne'} label=\"见证人员\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.witnessPersonnel && data.settingData.witnessPersonnel.constructor == Array && data.settingData.witnessPersonnel.map((res: number| string, ind: number) => <Select.Option value={ ind } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nconst validateMessages = { required: '${label} is required!' };\r\n\r\nexport default memo(Sleeve);\r\n","D:\\demoTestCopy\\src\\App.js",[],"D:\\demoTestCopy\\src\\utils\\hooks.tsx",["347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374"],"import React, {useEffect, useReducer, useRef, useState} from \"react\";\r\nimport {Store} from \"../store/vuex\";\r\nimport {useGlobalData} from \"./ContextState\";\r\nimport {message} from 'antd';\r\nimport Docxtemplater from 'docxtemplater';\r\nimport { saveAs } from 'file-saver';\r\nimport PizZip from 'pizzip';\r\nimport JSZipUtils from 'jszip-utils';\r\nimport XLSX from 'xlsx';\r\nimport { detailsDataKey } from \"../page/demo/component/Descriptions\";\r\n// @ts-ignore\r\nimport ExportJsonExcel from 'js-export-excel';\r\n\r\n\r\ntype Callback<T> = (val: T | undefined, oldVal: T | undefined) => T;\r\n\r\n// 模拟观察者\r\nexport function useWatch<T>(da: T, callback: Callback<T> ) {\r\n    const data = useRef<T>();\r\n    useEffect(() => {\r\n        data.current = da;\r\n    })\r\n    return callback(da, data.current);\r\n}\r\n\r\n\r\n// 强制组件更新\r\nexport const useUpdate = () => {\r\n    const [,setCount] = useReducer(s => s + 1, 0);\r\n    return setCount;\r\n}\r\n\r\n\r\nconst reducer = (state: Store, action: Store): Store => {\r\n    state = action\r\n    return state\r\n}\r\n\r\n// Hooks context 共享数据\r\nexport const useVuex = () => {\r\n    const { store, useManage } = useGlobalData();\r\n    const [ state, setState ] = useReducer(reducer, store);\r\n\r\n    const changeDa = JSON.parse(JSON.stringify( state ));\r\n    return {\r\n        fun: useManage( changeDa, setState ),\r\n        state\r\n    }\r\n}\r\n\r\n\r\n// 生命周期 初始化\r\ntype Callbacks<T> = () => void;\r\nexport function useCreated<T>(callback: Callbacks<T>): void {\r\n    const [boolValue, setBoolValue] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if(boolValue) {\r\n            setBoolValue(false);\r\n            callback && callback();\r\n        }\r\n        setBoolValue(true);\r\n    })\r\n}\r\n\r\n\r\n// 生命周期 组件挂载 触发一次\r\nexport function useMount<T>(callback: Callbacks<T>): void {\r\n    useEffect(() => {\r\n        callback && callback();\r\n    },[])\r\n}\r\n\r\n\r\n// 生命周期 组件卸载 触发\r\nexport function useMounted<T>(callback: Callbacks<T>) {\r\n    useEffect(() => {\r\n        return () => callback && callback();\r\n    },[])\r\n}\r\n\r\n\r\n// 生命周期 组件依赖跟新\r\nexport function useUpdata<T>(depend: T, callback: Callbacks<T>): void {\r\n    const [boolValue, setBoolValue] = useState<boolean>(false);\r\n    const Depend = Array.isArray(depend) ? [...depend] : [depend];\r\n\r\n    useEffect(() => {\r\n        if(boolValue) {\r\n            setBoolValue(false);\r\n            callback && callback();\r\n        }\r\n        setBoolValue(true);\r\n    }, Depend)\r\n}\r\n\r\n\r\n//模拟 ahooks useBoolean\r\ntype BooleanActions = {\r\n    toggle: (boo: boolean | undefined) => void,\r\n    setTrue: () => void,\r\n    setFalse: () => void,\r\n}\r\n\r\ntype BooleanBack = [\r\n    state: boolean,\r\n    BooleanActions: BooleanActions\r\n]\r\n\r\nexport function useBooleans(boo: boolean = false): BooleanBack {\r\n    const [state, setState] = useState<boolean>( boo );\r\n\r\n    const toggle = (value: boolean = state) => {\r\n        setState(value);\r\n    }\r\n\r\n    const setTrue = () => {\r\n        setState(true);\r\n    }\r\n\r\n    const setFalse = () => {\r\n        setState(false);\r\n    }\r\n\r\n    return [\r\n        state,\r\n        {\r\n            toggle,\r\n            setTrue,\r\n            setFalse,\r\n        }\r\n    ];\r\n}\r\n\r\n\r\n// 模拟 Ahooks useClickAway 管理目标元素外点击事件的 Hook。\r\ntype TargetArray = [\r\n    arr: string[],\r\n    fn?: () => void,\r\n] | any[]\r\nexport function useClickAways<T>(clickAway: MouseEvent | TouchEvent | any, target: string | string [], eventName?: string) {\r\n    const event = eventName || 'click';\r\n\r\n    useMount(() => {\r\n        document.addEventListener(event, clickAway);\r\n        let Targets: TargetArray = Array.isArray(target) ? target : [target];\r\n        Targets[0].map((res: string) => {\r\n            let dom: any = document.getElementById(res);\r\n            dom.addEventListener(event, (e: any) => {\r\n                e.stopPropagation();\r\n            })\r\n        });\r\n    });\r\n\r\n    useMounted(() => {\r\n        document.removeEventListener<any>(event, clickAway);\r\n    });\r\n}\r\n\r\n\r\n// 导出World\r\nexport function useChangeDoc<T>() {\r\n    // 导出状态\r\n    const [state, setState] = useState<boolean>(false);\r\n    // name 目标文件名称\r\n    // data 待替换字符串\r\n    const changeDoc = (name: string, data: T) => {\r\n        JSZipUtils.getBinaryContent(name, function(error: T, content: number[]) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            const zip = new PizZip(content);\r\n            const doc = new Docxtemplater();\r\n            doc.loadZip(zip);\r\n            doc.compile();\r\n            setState(false);\r\n            doc.resolveData(data).then(function () {\r\n                doc.render();\r\n                const out = doc.getZip().generate({\r\n                    type: \"blob\",\r\n                    mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n                });\r\n                saveAs(out, name);\r\n                setState(true);\r\n            })\r\n        });\r\n    }\r\n    return {\r\n        state,\r\n        changeDoc\r\n    };\r\n}\r\n\r\n\r\n\r\n// 获取当前时间\r\nexport function useGetTime(format: number = 1): string {\r\n    let now = new Date();\r\n    let year: string | number = now.getFullYear(); //得到年份\r\n    let month: string | number = now.getMonth();//得到月份\r\n    let date: string | number = now.getDate();//得到日期\r\n    let hour: string | number = now.getHours();//得到小时\r\n    let minu: string | number = now.getMinutes();//得到分钟\r\n    let sec: string | number = now.getSeconds();//得到秒\r\n    month = month + 1;\r\n    if (month < 10) month = \"0\" + month;\r\n    if (date < 10) date = \"0\" + date;\r\n    if (hour < 10) hour = \"0\" + hour;\r\n    if (minu < 10) minu = \"0\" + minu;\r\n    if (sec < 10) sec = \"0\" + sec;\r\n    let time = \"\";\r\n    //精确到天\r\n    if(format == 1){\r\n        time = year + \"-\" + month + \"-\" + date;\r\n    }\r\n    //精确到分\r\n    else if(format == 2){\r\n        time = year + \"-\" + month + \"-\" + date+ \" \" + hour + \":\" + minu + \":\" + sec;\r\n    }\r\n    //满足委托编号时间\r\n    else if (format === 3) {\r\n        time = String( month ) + date;\r\n    }\r\n    return time;\r\n}\r\n\r\n\r\n\r\n// 获取 唯一 随机数*时间戳，再转化为16进制\r\nexport function getTimeUnique (): string {\r\n    let stamp = new Date().getTime();\r\n    return (((1+Math.random())*stamp)|0).toString(16);\r\n}\r\n\r\n\r\n\r\n// 比较时间差\r\nexport function DateDiff(faultDate: string, completeTime: string): number{\r\n    let stime =new Date(faultDate).getTime();\r\n    let etime = new Date(completeTime).getTime();\r\n    //两个时间戳相差的毫秒数\r\n    let usedTime = etime - stime;\r\n    //计算出小时数\r\n    let days=Math.floor(usedTime/(24*3600*1000));\r\n    //计算天数后剩余的毫秒数\r\n    let leave1=usedTime%(24*3600*1000);\r\n    //计算相差分钟数\r\n    let hours=Math.floor(leave1/(3600*1000));\r\n    //计算小时数后剩余的毫秒数\r\n    let leave2=leave1%(3600*1000);\r\n    let minutes=Math.floor(leave2/(60*1000));\r\n    let time = days;\r\n    return time;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 时间延迟天数\r\n * @param dd 日期\r\n * @param dadd 推迟天数\r\n */\r\nexport function getthedate(dd: string, dadd: number): string {\r\n    let a = new Date(dd)\r\n    let num: number = a.valueOf();\r\n    let addNum: number = num + dadd * 24 * 60 * 60 * 1000;\r\n    a = new Date(addNum);\r\n    let m: string | number = a.getMonth() + 1;\r\n    if (m.toString().length === 1){\r\n        m ='0'+ m;\r\n    }\r\n    let d: string | number = a.getDate();\r\n    if (d.toString().length === 1) {\r\n        d ='0'+ d;\r\n    }\r\n    return a.getFullYear() + \"-\" + m + \"-\" + d;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 统计委托单数量\r\n * @param key\r\n * @param dataList\r\n */\r\nexport function NumberOrders (key: string, dataList: any, tabel: any): typeof dataList{\r\n    let time = useGetTime();\r\n    const data: string | null = localStorage.getItem('ordersNum');\r\n    const [tabelData, setTabelData] = tabel;\r\n    let obj: any;\r\n    // 存在不递增\r\n    if (dataList[\"orderNo\"].length > 11) {\r\n        dataList[\"orderNo\"] = dataList[\"orderNo\"];\r\n    }\r\n    else {\r\n        if (data != null) {\r\n            if (JSON.parse(data)['time'] == time ) {\r\n                obj = JSON.parse(data);\r\n            }\r\n            else {\r\n                obj = { time };\r\n            }\r\n        }\r\n        else {\r\n            obj = {time};\r\n        }\r\n        if (obj[key]) {\r\n            obj[key] ++;\r\n        }\r\n        else {\r\n            obj[key] = 1;\r\n        }\r\n        obj['time'] = time;\r\n\r\n        // 拼接委托单编号\r\n        dataList[\"orderNo\"] = dataList[\"orderNo\"] + '-' + String(obj[key] > 10? obj[key]: '0' + obj[key]);\r\n\r\n        localStorage.setItem('ordersNum', JSON.stringify(obj));\r\n        const da = localStorage.getItem('tabelData');\r\n        let arr\r\n        if (da != null) {\r\n            arr = JSON.parse(da);\r\n            arr.map((res: any) => {\r\n                if (dataList.key === res.key) {\r\n                    res.orderNo = dataList[\"orderNo\"];\r\n                }\r\n            });\r\n            setTabelData(arr);\r\n\r\n            // 存在问题 动态替换不能全局替换 -- 已改\r\n            localStorage.setItem(\"tabelData\", JSON.stringify(arr));\r\n        }\r\n    }\r\n\r\n    // 钢筋 | 混泥土原料样品唯一编号\r\n    if (key === \"reinforc\" || key === \"concrete\" || key === \"mortar\") {\r\n        dataList = generatedNumber<typeof dataList>(dataList);\r\n    }\r\n    return dataList;\r\n}\r\n\r\n\r\n\r\n// 导出前修改是否导出\r\nexport const isExportLocal = (dataList: any, tabel: any) => {\r\n    const [tabelData, setTabelData] = tabel;\r\n    let da: string | null = localStorage.getItem('tabelData');\r\n    const arr = da && JSON.parse(da);\r\n       arr && arr.map((res: any) => {\r\n            if (dataList.key === res.key) {\r\n                res.isExport = true;\r\n            }\r\n        });\r\n        setTabelData(arr);\r\n        localStorage.setItem(\"tabelData\", JSON.stringify(arr));\r\n    }\r\n\r\n\r\n\r\n// 判断委托单列数， 生成对应编号\r\nfunction generatedNumber<T> (dataList: any): T  {\r\n    if (dataList['ind2']) {\r\n        dataList[\"sampleNumber\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n        dataList[\"sampleNumber1\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n        dataList[\"sampleNumber2\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n    }\r\n    else if (dataList['ind1']) {\r\n        dataList[\"sampleNumber\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n        dataList[\"sampleNumber1\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n        dataList[\"sampleNumber2\"] = \"\";\r\n    }\r\n    else {\r\n        dataList[\"sampleNumber\"] = dataList[\"orderNo\"].slice(3, dataList[\"orderNo\"].length);\r\n        dataList[\"sampleNumber1\"] = \"\";\r\n        dataList[\"sampleNumber2\"] = \"\";\r\n    }\r\n    return dataList;\r\n}\r\n\r\n\r\n\r\n// 导出execel  待改善\r\nexport function useNewExportExcel() {\r\n    const [state, setState] = useState<boolean>(false);\r\n    function exportExcel (data: any, title: any) {\r\n            let option: any = {};  //option代表的就是excel文件\r\n            let dataTable: any = [];  //excel文件中的数据内容\r\n           const list = Object.keys(title).reduce((arr: any, item: string) => {\r\n               let obj = {\r\n                   title: title[item],\r\n                   dataIndex: item,\r\n                   key: item\r\n               }\r\n               console.log(obj)\r\n               arr.push(obj);\r\n                return arr\r\n           }, []);\r\n\r\n            data.map( (res: any) => {\r\n                let obj: any = {};\r\n                list.map((item: any) => {\r\n                    obj[item.title] = res[item.key]\r\n                })\r\n                dataTable.push(obj)\r\n            });\r\n\r\n            option.fileName = '测试';  //excel文件名称\r\n            option.datas = [\r\n                {\r\n                    sheetData: dataTable,  //excel文件中的数据源\r\n                    sheetName: '测试',  //excel文件中sheet页名称\r\n                    sheetFilter: Object.values(title),  //excel文件中需显示的列数据\r\n                    sheetHeader: Object.values(title),  //excel文件中每列的表头名称\r\n                }\r\n            ]\r\n\r\n            let toExcel = new ExportJsonExcel(option);  //生成excel文件\r\n            toExcel.saveExcel();  //下载excel文件\r\n            setState(true);\r\n    }\r\n\r\n    return {\r\n        exportExcel\r\n    }\r\n}\r\n\r\n\r\n\r\n// 导入Excel 待改善\r\nexport const useInportExcel = (tabel: any) => {\r\n    const [tabelData, setTabelData] = tabel;\r\n\r\n    const uploadExcel = (file: any, fileList?: any[]) => {\r\n            const { files } = file.target;\r\n            // 通过FileReader对象读取文件\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = event => {\r\n                try {\r\n                    const { result }: any = event.target;\r\n                    // 以二进制流方式读取得到整份excel表格对象\r\n                    const workbook = XLSX.read(result, { type: 'binary' });\r\n                    // 存储获取到的数据\r\n                    let data: any = [];\r\n                    // 遍历每张工作表进行读取（这里默认只读取第一张表）\r\n                    for (const sheet in workbook.Sheets) {\r\n                        // esline-disable-next-line\r\n                        if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n                            // 利用 sheet_to_json 方法将 excel 转成 json 数据\r\n                            data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\r\n                            // break; // 如果只取第一张表，就取消注释这行\r\n                        }\r\n                    }\r\n                    // 最终获取到并且格式化后的 json 数据\r\n                    const arr: any = [];\r\n                    data.map((res: any) => {\r\n                        let obj: any = {};\r\n                        for (let i in res) {\r\n                            for (const j in detailsDataKey) {\r\n                                if (i === detailsDataKey[j]) {\r\n                                    obj[j] = res[i]\r\n                                }\r\n                            }\r\n                        }\r\n                        arr.push(obj)\r\n                    })\r\n                    message.success('上传成功！');\r\n                    let tabelDataList: string | null = localStorage.getItem('tabelData');\r\n                    let arrTabel = tabelDataList? JSON.parse(tabelDataList): [];\r\n                    const len = arrTabel.length;\r\n                    const obj: any = {};\r\n                    arrTabel.map((item: any) => {\r\n                        obj[item.key] = item.key;\r\n                    });\r\n                    arr.map((res: any) => {\r\n                        if (len != 0) {\r\n                            if (!obj[res.key]) {\r\n                                arrTabel.push(res);\r\n                            }\r\n                        }\r\n                        else {\r\n                            arrTabel.push(res);\r\n                        }\r\n                    });\r\n                    setTabelData(arr);\r\n                    localStorage.setItem('tabelData', JSON.stringify(arrTabel));\r\n                    setTimeout(() => {\r\n                        window.history.go(0)\r\n                    }, 200)\r\n                } catch (e) {\r\n                    // 这里可以抛出文件类型错误不正确的相关提示\r\n                    message.error('文件类型不正确！');\r\n                }\r\n            };\r\n\r\n            // 以二进制方式打开文件\r\n            fileReader.readAsBinaryString(files[0]);\r\n    };\r\n\r\n    return {\r\n        uploadExcel\r\n    }\r\n}\r\n\r\n\r\n\r\n// 拼凑world 每页字符串\r\nexport function separateWprldArray (listCmr: any, num: number = 3)  {\r\n    let h = num;\r\n    const arr = [listCmr[h]];\r\n    const ffg = JSON.parse(JSON.stringify(listCmr));\r\n    for (let y = 2; h < ffg.length; y++) {\r\n        h += y * num;\r\n        if (ffg[h] != undefined) {\r\n            arr.push(listCmr[h]);\r\n        }\r\n    }\r\n    arr.push(ffg[listCmr.length - 1]);\r\n    return arr;\r\n}","D:\\demoTestCopy\\src\\page\\demo\\hooks\\queryEvent.ts",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],"import {useStore} from \"../../../store/vueStore/store\";\r\nimport {Store} from \"../../../store/vueStore\";\r\nimport { useGetTime, getTimeUnique } from \"../../../utils/hooks\";\r\n\r\nexport const useQueryEvent = () => {\r\n    const time = useGetTime();\r\n    const timeStr = useGetTime(3);\r\n\r\n    const data = useStore((store: Store) => {\r\n        const { tabelData, checkTabelData } = store.state;\r\n        return {\r\n            tabelData,\r\n            checkTabelData\r\n        }\r\n    });\r\n\r\n    // 处理多列\r\n    function multipleCol<T> (resInd: any, index: number, da: any, i: number = 0) {\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n\r\n                Object.keys(res).map(list => {\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            da[list + '1'] = res[list];\r\n                            da['ind1'] = 2;\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 2) {\r\n                            da[list + '2'] = res[list];\r\n                            da['ind2'] = 3;\r\n                        }\r\n                    }\r\n                    if ( i !== 0) {\r\n                        if (index > 2) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%3 === 0) {\r\n                                da[list] = res[list];\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%3 === 1) {\r\n                                da[list + 1] = res[list];\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind2'] = \"\";\r\n                            }\r\n\r\n                            if (index%3 === 2) {\r\n                                da[list + 2] = res[list];\r\n                                da['ind2'] = 3;\r\n                            }\r\n                        }\r\n                    }\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                });\r\n            }\r\n        });\r\n        return da;\r\n    }\r\n\r\n\r\n    // 处理waterproof\r\n    function dealWithWater<T> (resInd: any, index: number, da: any, i: number = 0, number: number = 3) {\r\n        console.log(resInd, index);\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n                console.log(res);\r\n                Object.keys(res).map(list => {\r\n\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da[\"batch\"] = resInd.batch;\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            da[list + '1'] = res[list];\r\n                            da['ind1'] = 2;\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                            da[\"batch1\"] = resInd.batch;\r\n\r\n                        }\r\n\r\n                        if (number == 3) {\r\n                            if (index === 2) {\r\n                                da[list + '2'] = res[list];\r\n                                da['ind2'] = 3;\r\n                                da[\"batch2\"] = resInd.batch;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    if ( i !== 0) {\r\n                        if (index > 2) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%number === 0) {\r\n                                da[list] = res[list];\r\n                                da[\"batch\"] = resInd.batch;\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%number === 1) {\r\n                                da[list + 1] = res[list];\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[\"batch1\"] = resInd.batch;\r\n                            }\r\n\r\n                            if (index%number === 2) {\r\n                                da[list + 2] = res[list];\r\n                                da['ind2'] = 3;\r\n                                da[\"batch2\"] = resInd.batch;\r\n                            }\r\n                        }\r\n                    }\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                    da['uuid'] = getTimeUnique();\r\n                });\r\n            }\r\n        });\r\n        return JSON.parse(JSON.stringify(da));\r\n    }\r\n\r\n    // 尝试switch\r\n    function switchWorld (resInd: any, index: number, da: any, i: number = 0, number: number = 3) {\r\n        console.log(resInd, index, da);\r\n\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n                console.log(res);\r\n                Object.keys(res).map(list => {\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da[\"batch\"] = resInd.batch;\r\n                            da[\"groupNum\"] = 1 + '组';\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            // 与上一栏类型一致\r\n                            if (da[\"type\"] == resInd.type) {\r\n                                if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                    da[list] = res[list];\r\n                                    da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                    // da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n                                    da[\"groupNum\"] = 2 + '组';\r\n                                    da['ind0'] = 1;\r\n                                    da[list + 1] = \"\";\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 1] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n                            else {\r\n                                da[list + '1'] = res[list];\r\n                                da[\"batch1\"] = resInd.batch ;\r\n                                da[\"groupNum1\"] = 1 + '组';\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind' + 2] = \"\";\r\n                            }\r\n                        }\r\n\r\n                        if (index === 2) {\r\n                            let key = list;\r\n                            // 第二栏存在\r\n                            if (da[list + '1']) {\r\n                                //  与上一栏比较类型\r\n                                if (da[\"type1\"] == resInd.type) {\r\n                                    if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[list + '1'] = res[list];\r\n                                        da['ind1'] = 24;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n                                        da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                        da[\"groupNum1\"] = 2 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                // 与第一栏栏比较类型\r\n                                if (da[\"type\"] == resInd.type) {\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                        da[\"groupNum\"] = 3  + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                // 不同重写第二栏\r\n                                else {\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    da[key + '1'] = res[key];\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                    da[\"batch1\"] = resInd.batch ;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if ( i !== 0) {\r\n                        if (index > 2) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%number === 0) {\r\n                                da[list] = res[list];\r\n                                da[\"batch\"] = resInd.batch;\r\n                                da[\"groupNum\"] = 1  + '组';\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%number === 1) {\r\n                                // 与上一栏类型一致\r\n                                if (da[\"type\"] == resInd.type) {\r\n                                    console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + resInd.limit);\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                        da[\"groupNum\"] = 2 + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    da[list + '1'] = res[list];\r\n                                    da[\"batch1\"] = resInd.batch;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n\r\n                            if (index%number === 2) {\r\n                                let key = list;\r\n                                // 第二栏存在\r\n                                if (da[list + '1']) {\r\n                                    //  与上一栏比较类型\r\n                                    if (da[\"type1\"] == resInd.type) {\r\n                                        if ((Number(resInd.batch) + Number(da[\"batch1\"])) <= ((2) * resInd.limit)) {\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                            da[list + '1'] = res[list];\r\n                                            da['ind1'] = 2;\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                            da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                            da[\"groupNum1\"] = 2 + '组';\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 与第一栏栏比较类型\r\n                                    if (da[\"type\"] == resInd.type) {\r\n                                        if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                            da[list] = res[list];\r\n                                            da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                            da[\"groupNum\"] = 3 + '组';\r\n                                            da['ind0'] = 1;\r\n                                            da[list + 1] = \"\";\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 1] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                        }\r\n                                    }\r\n                                    // 不同重写第二栏\r\n                                    else {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[key + '1'] = res[key];\r\n                                        da['ind1'] = 2;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        da[\"batch1\"] = resInd.batch ;\r\n                                        da[\"groupNum1\"] = 1 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(\"###############################################\")\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                    da['uuid'] = getTimeUnique();\r\n                });\r\n            }\r\n        });\r\n\r\n        return JSON.parse(JSON.stringify(da));\r\n    }\r\n\r\n    // 傻逼水泥土\r\n    function concreteWorld (resInd: any, index: number, da: any, i: number = 0, number: number = 3) {\r\n        console.log(resInd, index, da);\r\n        // data.tabelData.map((res: typeof data.tabelData) => {\r\n        //     if (res.key === resInd.key) {\r\n        //         console.log(res);\r\n        //         Object.keys(res).map(list => {\r\n        //             if (i === 0) {\r\n        //                 console.log('11111111111111111111111111111')\r\n        //                 if (index === 0) {\r\n        //                     da[list] = res[list];\r\n        //                     da[\"batch\"] = resInd.batch;\r\n        //                     da[\"groupNum\"] = 1 + '组';\r\n        //                     da['ind0'] = 1;\r\n        //                     da[list + 1] = \"\";\r\n        //                     da[list + 2] = \"\";\r\n        //                     da['ind' + 1] = \"\";\r\n        //                     da['ind' + 2] = \"\";\r\n        //                 }\r\n        //\r\n        //                 if (index === 1) {\r\n        //                     // 与上一栏类型一致\r\n        //                     if (da[\"maintenance\"] == res.maintenance) {\r\n        //                         if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                             da[list] = res[list];\r\n        //                             // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                             da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n        //                             da[\"groupNum\"] = 2 + '组';\r\n        //                             da['ind0'] = 1;\r\n        //                             da[list + 1] = \"\";\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 1] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                         }\r\n        //                     }\r\n        //                     else {\r\n        //                         da[list + '1'] = res[list];\r\n        //                         da[\"batch1\"] = resInd.batch ;\r\n        //                         da[\"groupNum1\"] = 1 + '组';\r\n        //                         da['ind1'] = 2;\r\n        //                         da[list + 2] = \"\";\r\n        //                         da['ind' + 2] = \"\";\r\n        //                     }\r\n        //                 }\r\n        //\r\n        //                 if (index === 2) {\r\n        //                     let key = list;\r\n        //                     // 第二栏存在\r\n        //                     if (da[list + '1']) {\r\n        //                         //  与上一栏比较类型\r\n        //                         if (da[\"maintenance1\"] == res.maintenance) {\r\n        //                             if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 da[list + '1'] = res[list];\r\n        //                                 da['ind1'] = 24;\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                                 da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n        //                                 da[\"groupNum1\"] = 2 + '组';\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             }\r\n        //                         }\r\n        //                     }\r\n        //                     else {\r\n        //                         // 与第一栏栏比较类型\r\n        //                         if (da[\"maintenance\"] == res.maintenance) {\r\n        //                             if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n        //                                 da[list] = res[list];\r\n        //                                 da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                 da[\"groupNum\"] = 3  + '组';\r\n        //                                 da['ind0'] = 1;\r\n        //                                 da[list + 1] = \"\";\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 1] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                             }\r\n        //                         }\r\n        //                         // 不同重写第二栏\r\n        //                         else {\r\n        //                             console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             da[key + '1'] = res[key];\r\n        //                             da['ind1'] = 2;\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                             da[\"batch1\"] = resInd.batch ;\r\n        //                             da[\"groupNum1\"] = 2  + '组';\r\n        //                             console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                         }\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //             if ( i !== 0) {\r\n        //                 if (index > 2) {\r\n        //                     console.log('222222222222222222222222222222222')\r\n        //                     if (index%number === 0) {\r\n        //                         da[list] = res[list];\r\n        //                         da[\"batch\"] = resInd.batch;\r\n        //                         da[\"groupNum\"] = 1  + '组';\r\n        //                         da['ind0'] = 1;\r\n        //                         da['ind1'] = \"\";\r\n        //                         da['ind2'] = \"\";\r\n        //                         da[list + 1] = \"\";\r\n        //                         da[list + 2] = \"\";\r\n        //                     }\r\n        //\r\n        //                     if (index%number === 1) {\r\n        //                         // 与上一栏类型一致\r\n        //                         if (da[\"maintenance\"] == res.maintenance) {\r\n        //                             console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n        //                             if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                 da[list] = res[list];\r\n        //                                 // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                 da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n        //                                 da[\"groupNum\"] = 2 + '组';\r\n        //                                 da['ind0'] = 1;\r\n        //                                 da[list + 1] = \"\";\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 1] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                             }\r\n        //                         }\r\n        //                         else {\r\n        //                             da[list + '1'] = res[list];\r\n        //                             da[\"batch1\"] = resInd.batch;\r\n        //                             da[\"groupNum1\"] = 1  + '组';\r\n        //                             da['ind1'] = 2;\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                         }\r\n        //                     }\r\n        //\r\n        //                     if (index%number === 2) {\r\n        //                         let key = list;\r\n        //                         // 第二栏存在\r\n        //                         if (da[list + '1']) {\r\n        //                             //  与上一栏比较类型\r\n        //                             if (da[\"maintenance1\"] == res.maintenance) {\r\n        //                                 if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                     console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                     da[list + '1'] = res[list];\r\n        //                                     da['ind1'] = 2;\r\n        //                                     da[list + 2] = \"\";\r\n        //                                     da['ind' + 2] = \"\";\r\n        //                                     da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n        //                                     da[\"groupNum1\"] = 2 + '组';\r\n        //                                     console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 }\r\n        //                             }\r\n        //                         }\r\n        //                         else {\r\n        //                             // 与第一栏栏比较类型\r\n        //                             if (da[\"maintenance\"] == res.maintenance) {\r\n        //                                 if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n        //                                     da[list] = res[list];\r\n        //                                     da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                     da[\"groupNum\"] = 3 + '组';\r\n        //                                     da['ind0'] = 1;\r\n        //                                     da[list + 1] = \"\";\r\n        //                                     da[list + 2] = \"\";\r\n        //                                     da['ind' + 1] = \"\";\r\n        //                                     da['ind' + 2] = \"\";\r\n        //                                 }\r\n        //                             }\r\n        //                             // 不同重写第二栏\r\n        //                             else {\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 da[key + '1'] = res[key];\r\n        //                                 da['ind1'] = 2;\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                                 da[\"batch1\"] = resInd.batch ;\r\n        //                                 da[\"groupNum1\"] = 1 + '组';\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             }\r\n        //                         }\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //             console.log(\"###############################################\")\r\n        //             da['lineTime'] = time;\r\n        //             da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n        //             da['uuid'] = getTimeUnique();\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n                console.log(res);\r\n                Object.keys(res).map(list => {\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da[\"batch\"] = resInd.batch;\r\n                            da[\"groupNum\"] = 1 + '组';\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            // 与上一栏类型一致\r\n                            if (da[\"maintenance\"] == res.maintenance) {\r\n                                if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                    da[list] = res[list];\r\n                                    da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                    // da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n                                    da[\"groupNum\"] = 2 + '组';\r\n                                    da['ind0'] = 1;\r\n                                    da[list + 1] = \"\";\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 1] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n                            else {\r\n                                da[list + '1'] = res[list];\r\n                                da[\"batch1\"] = resInd.batch ;\r\n                                da[\"groupNum1\"] = 1 + '组';\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind' + 2] = \"\";\r\n                            }\r\n                        }\r\n\r\n                        if (index === 2) {\r\n                            let key = list;\r\n                            // 第二栏存在\r\n                            if (da[list + '1']) {\r\n                                //  与上一栏比较类型\r\n                                if (da[\"maintenance1\"] == res.maintenance) {\r\n                                    if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[list + '1'] = res[list];\r\n                                        da['ind1'] = 24;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n                                        da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                        da[\"groupNum1\"] = 2 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                // 与第一栏栏比较类型\r\n                                if (da[\"maintenance\"] == res.maintenance) {\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                        da[\"groupNum\"] = 3  + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                // 不同重写第二栏\r\n                                else {\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    da[key + '1'] = res[key];\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                    da[\"batch1\"] = resInd.batch ;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if ( i !== 0) {\r\n                        if (index > 2) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%number === 0) {\r\n                                da[list] = res[list];\r\n                                da[\"batch\"] = resInd.batch;\r\n                                da[\"groupNum\"] = 1  + '组';\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%number === 1) {\r\n                                // 与上一栏类型一致\r\n                                if (da[\"maintenance\"] == res.maintenance) {\r\n                                    console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + resInd.limit);\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                        da[\"groupNum\"] = 2 + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    da[list + '1'] = res[list];\r\n                                    da[\"batch1\"] = resInd.batch;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n\r\n                            if (index%number === 2) {\r\n                                let key = list;\r\n                                // 第二栏存在\r\n                                if (da[list + '1']) {\r\n                                    //  与上一栏比较类型\r\n                                    if (da[\"maintenance1\"] == res.maintenance) {\r\n                                        if ((Number(resInd.batch) + Number(da[\"batch1\"])) <= ((2) * resInd.limit)) {\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                            da[list + '1'] = res[list];\r\n                                            da['ind1'] = 2;\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                            da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                            da[\"groupNum1\"] = 2 + '组';\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 与第一栏栏比较类型\r\n                                    if (da[\"maintenance\"] == res.maintenance) {\r\n                                        if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                            da[list] = res[list];\r\n                                            da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                            da[\"groupNum\"] = 3 + '组';\r\n                                            da['ind0'] = 1;\r\n                                            da[list + 1] = \"\";\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 1] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                        }\r\n                                    }\r\n                                    // 不同重写第二栏\r\n                                    else {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[key + '1'] = res[key];\r\n                                        da['ind1'] = 2;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        da[\"batch1\"] = resInd.batch ;\r\n                                        da[\"groupNum1\"] = 1 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(\"###############################################\")\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                    da['uuid'] = getTimeUnique();\r\n                });\r\n            }\r\n        });\r\n\r\n        return JSON.parse(JSON.stringify(da));\r\n    }\r\n\r\n    // 砂浆\r\n    function mortarWorld (resInd: any, index: number, da: any, i: number = 0, number: number = 3) {\r\n        console.log(resInd, index, da);\r\n\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n                console.log(res);\r\n                Object.keys(res).map(list => {\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da[\"batch\"] = resInd.batch;\r\n                            da[\"groupNum\"] = 1 + '组';\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            // 与上一栏类型一致\r\n                            if (da[\"sampleName\"] == res.sampleName && da[\"type\"] == res.type) {\r\n                                if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                    da[list] = res[list];\r\n                                    da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                    // da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n                                    da[\"groupNum\"] = 2 + '组';\r\n                                    da['ind0'] = 1;\r\n                                    da[list + 1] = \"\";\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 1] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n                            else {\r\n                                da[list + '1'] = res[list];\r\n                                da[\"batch1\"] = resInd.batch ;\r\n                                da[\"groupNum1\"] = 1 + '组';\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind' + 2] = \"\";\r\n                            }\r\n                        }\r\n\r\n                        if (index === 2) {\r\n                            let key = list;\r\n                            // 第二栏存在\r\n                            if (da[list + '1']) {\r\n                                //  与上一栏比较类型\r\n                                if (da[\"sampleName1\"] == res.sampleName && da[\"type1\"] == res.type) {\r\n                                    if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[list + '1'] = res[list];\r\n                                        da['ind1'] = 24;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n                                        da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                        da[\"groupNum1\"] = 2 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                // 与第一栏栏比较类型\r\n                                if (da[\"sampleName\"] == res.sampleName && da[\"type\"] == res.type) {\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                        da[\"groupNum\"] = 3  + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                // 不同重写第二栏\r\n                                else {\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    da[key + '1'] = res[key];\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                    da[\"batch1\"] = resInd.batch ;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if ( i !== 0) {\r\n                        if (index > 2) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%number === 0) {\r\n                                da[list] = res[list];\r\n                                da[\"batch\"] = resInd.batch;\r\n                                da[\"groupNum\"] = 1  + '组';\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%number === 1) {\r\n                                // 与上一栏类型一致\r\n                                if (da[\"sampleName\"] == res.sampleName && da[\"type\"] == res.type) {\r\n                                    console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + resInd.limit);\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                        da[\"groupNum\"] = 2 + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    da[list + '1'] = res[list];\r\n                                    da[\"batch1\"] = resInd.batch;\r\n                                    da[\"groupNum1\"] = 1  + '组';\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n\r\n                            if (index%number === 2) {\r\n                                let key = list;\r\n                                // 第二栏存在\r\n                                if (da[list + '1']) {\r\n                                    //  与上一栏比较类型\r\n                                    if (da[\"sampleName1\"] == res.sampleName && da[\"type1\"] == res.type) {\r\n                                        if ((Number(resInd.batch) + Number(da[\"batch1\"])) <= ((2) * resInd.limit)) {\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                            da[list + '1'] = res[list];\r\n                                            da['ind1'] = 2;\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                            da[\"batch1\"] = (Number(resInd.batch) + (Number(da[\"batch1\"])<resInd.limit? Number(da[\"batch1\"]): resInd.limit));\r\n                                            da[\"groupNum1\"] = 2 + '组';\r\n                                            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // 与第一栏栏比较类型\r\n                                    if (da[\"sampleName\"] == res.sampleName && da[\"type\"] == res.type) {\r\n                                        if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n                                            da[list] = res[list];\r\n                                            da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<(resInd.limit * 2)? Number(da[\"batch\"]): (resInd.limit * 2)));\r\n                                            da[\"groupNum\"] = 3 + '组';\r\n                                            da['ind0'] = 1;\r\n                                            da[list + 1] = \"\";\r\n                                            da[list + 2] = \"\";\r\n                                            da['ind' + 1] = \"\";\r\n                                            da['ind' + 2] = \"\";\r\n                                        }\r\n                                    }\r\n                                    // 不同重写第二栏\r\n                                    else {\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                        da[key + '1'] = res[key];\r\n                                        da['ind1'] = 2;\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                        da[\"batch1\"] = resInd.batch ;\r\n                                        da[\"groupNum1\"] = 1 + '组';\r\n                                        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(\"###############################################\")\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                    da['uuid'] = getTimeUnique();\r\n                });\r\n            }\r\n        });\r\n\r\n        // data.tabelData.map((res: typeof data.tabelData) => {\r\n        //     if (res.key === resInd.key) {\r\n        //         console.log(res);\r\n        //         Object.keys(res).map(list => {\r\n        //             if (i === 0) {\r\n        //                 console.log('11111111111111111111111111111')\r\n        //                 if (index === 0) {\r\n        //                     da[list] = res[list];\r\n        //                     da[\"batch\"] = resInd.batch;\r\n        //                     da[\"groupNum\"] = 1 + '组';\r\n        //                     da['ind0'] = 1;\r\n        //                     da[list + 1] = \"\";\r\n        //                     da[list + 2] = \"\";\r\n        //                     da['ind' + 1] = \"\";\r\n        //                     da['ind' + 2] = \"\";\r\n        //                 }\r\n        //\r\n        //                 if (index === 1) {\r\n        //                     // 与上一栏类型一致\r\n        //                     if (da[\"sampleName\"] == res.sampleName) {\r\n        //                         if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                             da[list] = res[list];\r\n        //                             // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                             da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n        //                             da[\"groupNum\"] = 2 + '组';\r\n        //                             da['ind0'] = 1;\r\n        //                             da[list + 1] = \"\";\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 1] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                         }\r\n        //                     }\r\n        //                     else {\r\n        //                         da[list + '1'] = res[list];\r\n        //                         da[\"batch1\"] = resInd.batch ;\r\n        //                         da[\"groupNum1\"] = 1 + '组';\r\n        //                         da['ind1'] = 2;\r\n        //                         da[list + 2] = \"\";\r\n        //                         da['ind' + 2] = \"\";\r\n        //                     }\r\n        //                 }\r\n        //\r\n        //                 if (index === 2) {\r\n        //                     let key = list;\r\n        //                     // 第二栏存在\r\n        //                     if (da[list + '1']) {\r\n        //                         //  与上一栏比较类型\r\n        //                         if (da[\"sampleName1\"] == res.sampleName) {\r\n        //                             if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 da[list + '1'] = res[list];\r\n        //                                 da['ind1'] = 24;\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                                 da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n        //                                 da[\"groupNum1\"] = 2 + '组';\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             }\r\n        //                         }\r\n        //                     }\r\n        //                     else {\r\n        //                         // 与第一栏栏比较类型\r\n        //                         if (da[\"sampleName\"] == res.sampleName) {\r\n        //                             if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n        //                                 da[list] = res[list];\r\n        //                                 da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                 da[\"groupNum\"] = 3  + '组';\r\n        //                                 da['ind0'] = 1;\r\n        //                                 da[list + 1] = \"\";\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 1] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                             }\r\n        //                         }\r\n        //                         // 不同重写第二栏\r\n        //                         else {\r\n        //                             console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             da[key + '1'] = res[key];\r\n        //                             da['ind1'] = 2;\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                             da[\"batch1\"] = resInd.batch ;\r\n        //                             da[\"groupNum1\"] = 2  + '组';\r\n        //                             console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                         }\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //             if ( i !== 0) {\r\n        //                 if (index > 2) {\r\n        //                     console.log('222222222222222222222222222222222')\r\n        //                     if (index%number === 0) {\r\n        //                         da[list] = res[list];\r\n        //                         da[\"batch\"] = resInd.batch;\r\n        //                         da[\"groupNum\"] = 1  + '组';\r\n        //                         da['ind0'] = 1;\r\n        //                         da['ind1'] = \"\";\r\n        //                         da['ind2'] = \"\";\r\n        //                         da[list + 1] = \"\";\r\n        //                         da[list + 2] = \"\";\r\n        //                     }\r\n        //\r\n        //                     if (index%number === 1) {\r\n        //                         // 与上一栏类型一致\r\n        //                         if (da[\"sampleName\"] == res.sampleName) {\r\n        //                             console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n        //                             if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                 da[list] = res[list];\r\n        //                                 // da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                 da[\"batch\"] = (Number(resInd.batch) + Number(resInd.limit));\r\n        //                                 da[\"groupNum\"] = 2 + '组';\r\n        //                                 da['ind0'] = 1;\r\n        //                                 da[list + 1] = \"\";\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 1] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                             }\r\n        //                         }\r\n        //                         else {\r\n        //                             da[list + '1'] = res[list];\r\n        //                             da[\"batch1\"] = resInd.batch;\r\n        //                             da[\"groupNum1\"] = 1  + '组';\r\n        //                             da['ind1'] = 2;\r\n        //                             da[list + 2] = \"\";\r\n        //                             da['ind' + 2] = \"\";\r\n        //                         }\r\n        //                     }\r\n        //\r\n        //                     if (index%number === 2) {\r\n        //                         let key = list;\r\n        //                         // 第二栏存在\r\n        //                         if (da[list + '1']) {\r\n        //                             //  与上一栏比较类型\r\n        //                             if (da[\"sampleName1\"] == res.sampleName) {\r\n        //                                 if ((Number(da[\"batch1\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n        //                                     console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                     da[list + '1'] = res[list];\r\n        //                                     da['ind1'] = 2;\r\n        //                                     da[list + 2] = \"\";\r\n        //                                     da['ind' + 2] = \"\";\r\n        //                                     da[\"batch1\"] = (Number(resInd.batch) + Number(da[\"batch1\"]));\r\n        //                                     da[\"groupNum1\"] = 2 + '组';\r\n        //                                     console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 }\r\n        //                             }\r\n        //                         }\r\n        //                         else {\r\n        //                             // 与第一栏栏比较类型\r\n        //                             if (da[\"sampleName\"] == res.sampleName) {\r\n        //                                 if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((3) * resInd.limit)) {\r\n        //                                     da[list] = res[list];\r\n        //                                     da[\"batch\"] = (Number(resInd.batch) + Number(da[\"batch\"]));\r\n        //                                     da[\"groupNum\"] = 3 + '组';\r\n        //                                     da['ind0'] = 1;\r\n        //                                     da[list + 1] = \"\";\r\n        //                                     da[list + 2] = \"\";\r\n        //                                     da['ind' + 1] = \"\";\r\n        //                                     da['ind' + 2] = \"\";\r\n        //                                 }\r\n        //                             }\r\n        //                             // 不同重写第二栏\r\n        //                             else {\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                                 da[key + '1'] = res[key];\r\n        //                                 da['ind1'] = 2;\r\n        //                                 da[list + 2] = \"\";\r\n        //                                 da['ind' + 2] = \"\";\r\n        //                                 da[\"batch1\"] = resInd.batch ;\r\n        //                                 da[\"groupNum1\"] = 1 + '组';\r\n        //                                 console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\r\n        //                             }\r\n        //                         }\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //             console.log(\"###############################################\")\r\n        //             da['lineTime'] = time;\r\n        //             da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n        //             da['uuid'] = getTimeUnique();\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        return JSON.parse(JSON.stringify(da));\r\n    }\r\n    \r\n    function permeabilityWorld(resInd: any, index: number, da: any, i: number = 0, number: number = 3) {\r\n        console.log(resInd)\r\n        data.tabelData.map((res: typeof data.tabelData) => {\r\n            if (res.key === resInd.key) {\r\n                console.log(res);\r\n                Object.keys(res).map(list => {\r\n                    if (i === 0) {\r\n                        console.log('11111111111111111111111111111')\r\n                        if (index === 0) {\r\n                            da[list] = res[list];\r\n                            da[\"batch\"] = resInd.batch;\r\n                            da[\"groupNum\"] = 1 + 'a组';\r\n                            da['ind0'] = 1;\r\n                            da[list + 1] = \"\";\r\n                            da[list + 2] = \"\";\r\n                            da['ind' + 1] = \"\";\r\n                            da['ind' + 2] = \"\";\r\n                        }\r\n\r\n                        if (index === 1) {\r\n                            // 与上一栏类型一致\r\n                            if (da[\"maintenance\"] == res.maintenance) {\r\n                                if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                    da[list] = res[list];\r\n                                    da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                    da[\"groupNum\"] = 2 + '组';\r\n                                    da['ind0'] = 1;\r\n                                    da[list + 1] = \"\";\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 1] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n                            else {\r\n                                da[list + '1'] = res[list];\r\n                                da[\"batch1\"] = resInd.batch ;\r\n                                da[\"groupNum1\"] = 1 + 's组';\r\n                                da['ind1'] = 2;\r\n                                da[list + 2] = \"\";\r\n                                da['ind' + 2] = \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                    if (i !== 0) {\r\n                        if (index > 1) {\r\n                            console.log('222222222222222222222222222222222')\r\n                            if (index%number === 0) {\r\n                                da[list] = res[list];\r\n                                da[\"batch\"] = resInd.batch;\r\n                                da[\"a\"] = index;\r\n                                da[\"groupNum\"] = 1  + 'd组';\r\n                                da['ind0'] = 1;\r\n                                da['ind1'] = \"\";\r\n                                da['ind2'] = \"\";\r\n                                da[list + 1] = \"\";\r\n                                da[list + 2] = \"\";\r\n                            }\r\n\r\n                            if (index%number === 1) {\r\n                                // 与上一栏类型一致\r\n                                if (da[\"maintenance\"] == res.maintenance) {\r\n                                    console.log('--------------------------', da[\"batch\"], (Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit));\r\n                                    if ((Number(da[\"batch\"]) + Number(resInd.batch)) <= ((2) * resInd.limit)) {\r\n                                        da[list] = res[list];\r\n                                        // da[\"batch1\"] = (Number(resInd.batch) + resInd.limit);\r\n                                        da[\"batch\"] = (Number(resInd.batch) + (Number(da[\"batch\"])<resInd.limit? Number(da[\"batch\"]): resInd.limit));\r\n                                        da[\"groupNum\"] = 2 + '组';\r\n                                        da['ind0'] = 1;\r\n                                        da[list + 1] = \"\";\r\n                                        da[list + 2] = \"\";\r\n                                        da['ind' + 1] = \"\";\r\n                                        da['ind' + 2] = \"\";\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    da[list + '1'] = res[list];\r\n                                    da[\"batch1\"] = resInd.batch;\r\n                                    da[\"groupNum1\"] = 1  + 'g组';\r\n                                    da['ind1'] = 2;\r\n                                    da[list + 2] = \"\";\r\n                                    da['ind' + 2] = \"\";\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(\"###############################################\")\r\n                    da['lineTime'] = time;\r\n                    da['orderNo'] = res['orderNo'].length > 10?res['orderNo']: res['orderNo'] + '-' + timeStr;\r\n                    da['uuid'] = getTimeUnique();\r\n                });\r\n            }\r\n        });\r\n        return JSON.parse(JSON.stringify(da));\r\n    }\r\n    return {\r\n        multipleCol,\r\n        dealWithWater,\r\n        switchWorld,\r\n        concreteWorld,\r\n        mortarWorld,\r\n        permeabilityWorld\r\n    }\r\n};\r\n","D:\\demoTestCopy\\src\\page\\demo\\soil\\plainSoil.tsx",["416","417","418","419","420","421"],"import React, {memo, useRef} from \"react\";\r\nimport {Select, Button, Form, Input, DatePicker, message} from 'antd';\r\nimport {useCreated, useGetTime} from \"../../../utils/hooks\";\r\nimport moment from \"_moment@2.29.1@moment\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\n\r\n// 试样名称\r\nconst sampleName = ['素土回填', '2：8灰土回填', '3：7灰土回填',' 4: 6砂石回填'];\r\n// 使用机械\r\nconst useMechanical = ['蛙式打夯机', '立式打夯机', '小型压路机'];\r\n\r\n// PlainSoil 素土\r\nconst PlainSoil = () => {\r\n\r\n    const formTab: any = useRef(null);\r\n    const time = useGetTime();\r\n    const times = useGetTime(2);\r\n    const data = useStore((store: Store) => {\r\n        const { state } = store;\r\n        const { settingData } = state;\r\n        return {\r\n            settingData\r\n        }\r\n    });\r\n\r\n    useCreated(() => {\r\n        if (formTab != null) {\r\n            formTab.current.setFieldsValue({time: moment(time)});\r\n            formTab.current.setFieldsValue({samplingDate: moment(time)});\r\n        }}\r\n    );\r\n\r\n    const onFinish = (values: any) => {\r\n        console.log(values);\r\n        let da: typeof values = {};\r\n        da.time = moment(values.time).format('YYYY-MM-DD');\r\n        da.samplingDate = moment(values.samplingDate).format('YYYY-MM-DD');\r\n        da.type = values.layerNumber + values.thickness + values.elevation;\r\n        da.keyName = \"plainSoil\";\r\n        da.key = \"plainSoil\" + times;\r\n        da.useParts = values.usingScopeParts + values.useParts;\r\n        da.orderNo = \"ZH-JS\";\r\n        let testDa = Object.assign(data.settingData, values,  da);\r\n\r\n        mutations.addTabelData(testDa);\r\n        message.success('提交成功');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            素土\r\n\r\n            <Form {...layout} ref={ formTab } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={'sampleName'} label=\"试样名称\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            sampleName.map(res => <Select.Option value={ res } key={ res }>{ res }</Select.Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name={'dryDensity'} label=\"干密度\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'waterContent'} label=\"含水率\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'volume'} label=\"体积\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        <Select.Option value=\"100\">100</Select.Option>\r\n                        <Select.Option value=\"200\">200</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useMechanical'} label=\"使用机械\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            useMechanical.map(res => <Select.Option value={ res } key={ res }>{ res }</Select.Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'layerNumber'} label=\"层数\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'thickness'} label=\"厚度\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'elevation'} label=\"标高\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'compactingFactor'} label=\"系数\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'time'} label=\"日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'usingScopeParts'} label=\"部位范围\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.usingScopePartsList && data.settingData.usingScopePartsList.constructor == Array && data.settingData.usingScopePartsList.map((res: number | string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useParts'} label=\"具体部位\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'batch'} label=\"数量\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'samplingDate'} label=\"取样日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'projectClass'} label=\"项目分类\">\r\n                    <Select>\r\n                        { data.settingData.projectClasss && data.settingData.projectClasss.constructor == Array && data.settingData.projectClasss.map((res: number| string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n        email: '${label} is not a valid email!',\r\n        number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\nexport default memo(PlainSoil);\r\n","D:\\demoTestCopy\\src\\page\\demo\\soil\\dust.tsx",["422","423","424"],"import React, {memo, useRef} from \"react\";\r\nimport {Select, Button, Form, Input, DatePicker, message} from 'antd';\r\nimport { useCreated, useGetTime } from \"../../../utils/hooks\";\r\nimport moment from 'moment'\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\n\r\n// 试样名称\r\nconst sampleName = ['素土', '2:8灰土', '3:7灰土'];\r\n\r\n// 灰土\r\nconst Dust = () => {\r\n    const formTab: any = useRef(null);\r\n    const time = useGetTime();\r\n    const times = useGetTime(2);\r\n\r\n    const data = useStore((store: Store) => {\r\n        const { tabelData, checkTabelData, settingData } = store.state;\r\n        return {\r\n            tabelData,\r\n            checkTabelData,\r\n            settingData\r\n        }\r\n    });\r\n\r\n    useCreated(() => {\r\n        if (formTab != null) {\r\n            formTab.current.setFieldsValue({time: moment(time)});\r\n            formTab.current.setFieldsValue({samplingDate: moment(time)});\r\n        }}\r\n    );\r\n\r\n    const onFinish = (values: any) => {\r\n        console.log(values);\r\n        const da: typeof values = {};\r\n        da.time = moment(values.time).format('YYYY-MM-DD');\r\n        da.samplingDate = moment(values.samplingDate).format('YYYY-MM-DD');\r\n        da.factory = '土：' + values.factorySoil + '\\n白灰：' + values.factoryWhite;\r\n        da.supplyMarketingUnits = '土：' + values.supplyMarketingUnitsSoil + '\\n白灰：' + values.supplyMarketingUnitsWhite;\r\n        da.batch = '素土：50kg\\n白灰：30kg'\r\n        da.keyName = \"dust\";\r\n        da.key = \"dust\" + times;\r\n        da.useParts = values.usingScopeParts + values.useParts;\r\n        da.groupNum = \"一组\";\r\n        da.orderNo = \"ZH-JS\";\r\n        da.witnessPersonne = data.settingData.witnessPersonnel[values.witnessPersonne];\r\n        da.witnessPersonNum = (data.settingData.inspectionQualifiedNum && data.settingData.inspectionQualifiedNum[values.witnessPersonne]) || \"\";\r\n        const testDa = Object.assign(data.settingData, values,  da);\r\n        mutations.addTabelData(testDa);\r\n        message.success('提交成功');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            灰土\r\n\r\n            <Form {...layout} ref={ formTab } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={'sampleName'} label=\"试样名称\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            sampleName.map(res => <Select.Option value={ res } key={ res }>{ res }</Select.Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'factorySoil'} label=\"生产厂家 - 土\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'factoryWhite'} label=\"生产厂家 - 白灰\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'supplyMarketingUnitsSoil'} label=\"供销单位 - 土\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'supplyMarketingUnitsWhite'} label=\"供销单位 - 白灰\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'time'} label=\"进厂日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'usingScopeParts'} label=\"部位范围\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.usingScopePartsList && data.settingData.usingScopePartsList.constructor == Array && data.settingData.usingScopePartsList.map((res: number | string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useParts'} label=\"具体部位\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'samplingDate'} label=\"取样日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                {/*<Form.Item name={'projectClass'} label=\"项目分类\">*/}\r\n                {/*    <Select>*/}\r\n                {/*        { data.settingData.projectClasss && data.settingData.projectClasss.constructor == Array && data.settingData.projectClasss.map((res: number| string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }*/}\r\n                {/*    </Select>*/}\r\n                {/*</Form.Item>*/}\r\n\r\n                <Form.Item name={'witnessPersonne'} label=\"见证人员\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.witnessPersonnel && data.settingData.witnessPersonnel.constructor == Array && data.settingData.witnessPersonnel.map((res: number| string, ind: number) => <Select.Option value={ ind } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};\r\n\r\nexport default memo(Dust);\r\n","D:\\demoTestCopy\\src\\page\\demo\\soil\\ringKnife.tsx",["425","426","427"],"import React, {memo, useRef} from \"react\";\r\nimport {Select, Button, Form, Input, DatePicker, message} from 'antd';\r\nimport {useCreated, useGetTime} from \"../../../utils/hooks\";\r\nimport moment from \"_moment@2.29.1@moment\";\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FormStyle = styled.div`\r\n    \r\n    form {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: space-around;\r\n        \r\n        >div {\r\n            width: 45%;\r\n        }\r\n    }\r\n`\r\n\r\n// 试样名称\r\nconst sampleName = ['素土回填', '2：8灰土回填', '3：7灰土回填',' 4: 6砂石回填'];\r\n// 使用机械\r\nconst useMechanical = ['蛙式打夯机', '立式打夯机', '小型压路机'];\r\n\r\n// ringKnife 环刀\r\nconst RingKnife = () => {\r\n\r\n    const formTab: any = useRef(null);\r\n    const time = useGetTime();\r\n    const times = useGetTime(2);\r\n    const data = useStore((store: Store) => {\r\n        const { tabelData, checkTabelData, settingData } = store.state;\r\n        return {\r\n            tabelData,\r\n            checkTabelData,\r\n            settingData\r\n        }\r\n    });\r\n\r\n    useCreated(() => {\r\n        if (formTab != null) {\r\n            formTab.current.setFieldsValue({time: moment(time)});\r\n            formTab.current.setFieldsValue({samplingDate: moment(time)});\r\n        }}\r\n    );\r\n\r\n    const onFinish = (values: any) => {\r\n        console.log(values);\r\n        const da: typeof values = {};\r\n        da.time = moment(values.time).format('YYYY-MM-DD');\r\n        da.samplingDate = moment(values.samplingDate).format('YYYY-MM-DD');\r\n        da.type = values.layerNumber + values.thickness + values.elevation;\r\n        da.keyName = \"ringKnife\";\r\n        da.key = \"ringKnife\" + times;\r\n        da.useParts = values.usingScopeParts + values.useParts;\r\n        da.orderNo = \"ZH-HD\";\r\n        da.witnessPersonne = data.settingData.witnessPersonnel[values.witnessPersonne];\r\n        da.witnessPersonNum = data.settingData.inspectionQualifiedNum[values.witnessPersonne];\r\n        const testDa = Object.assign(data.settingData, values,  da);\r\n\r\n        mutations.addTabelData(testDa);\r\n        message.success('提交成功');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            环刀\r\n            <FormStyle>\r\n            <Form {...layout} ref={ formTab } name=\"nest-messages\" id=\"formStyle\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                <Form.Item name={'sampleName'} label=\"试样名称\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            sampleName.map(res => <Select.Option value={ res } key={ res }>{ res }</Select.Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'dryDensity'} label=\"干密度\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'waterContent'} label=\"含水率\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'volume'} label=\"体积\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        <Select.Option value=\"100\">100</Select.Option>\r\n                        <Select.Option value=\"200\">200</Select.Option>\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useMechanical'} label=\"使用机械\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        {\r\n                            useMechanical.map(res => <Select.Option value={ res } key={ res }>{ res }</Select.Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'layerNumber'} label=\"层数\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'thickness'} label=\"厚度\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'elevation'} label=\"标高\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'compactingFactor'} label=\"系数\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'time'} label=\"日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'usingScopeParts'} label=\"部位范围\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.usingScopePartsList && data.settingData.usingScopePartsList.constructor == Array && data.settingData.usingScopePartsList.map((res: number | string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'useParts'} label=\"具体部位\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'batch'} label=\"数量\" rules={[{ required: true }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name={'samplingDate'} label=\"取样日期\" rules={[{ required: true }]}>\r\n                    <DatePicker format=\"YYYY-MM-DD\" />\r\n                </Form.Item>\r\n\r\n                {/*<Form.Item name={'projectClass'} label=\"项目分类\">*/}\r\n                {/*    <Select>*/}\r\n                {/*        { data.settingData.projectClasss && data.settingData.projectClasss.constructor == Array && data.settingData.projectClasss.map((res: number| string) => <Select.Option value={ res } key={ res }>{ res }</Select.Option>) }*/}\r\n                {/*    </Select>*/}\r\n                {/*</Form.Item>*/}\r\n\r\n                <Form.Item name={'witnessPersonne'} label=\"见证人员\" rules={[{ required: true }]}>\r\n                    <Select>\r\n                        { data.settingData.witnessPersonnel && data.settingData.witnessPersonnel.constructor == Array && data.settingData.witnessPersonnel.map((res: number| string, ind: number) => <Select.Option value={ ind } key={ res }>{ res }</Select.Option>) }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n            </FormStyle>\r\n        </>\r\n    );\r\n}\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};\r\n\r\nexport default memo(RingKnife);\r\n","D:\\demoTestCopy\\src\\page\\demo\\setting\\units.tsx",["428","429","430","431","432"],"import React, { memo, useRef } from 'react';\r\nimport {Button, Form, Input, message} from \"antd\";\r\nimport {useCreated} from \"../../../utils/hooks\";\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {Modals} from \"../component/Modal\";\r\nimport {ManufacturerStyle, ModalsContext} from \"./resources/style\";\r\nimport { unitsConfig, TabelType } from \"./resources/data\";\r\nimport { useSetTing } from \"./resources/hooks\"\r\n\r\nconst Units = () => {\r\n\tconst formTab: any = useRef(null);\r\n\tconst data = useStore((store: Store) => {\r\n\t    const { state } = store;\r\n\t    const { settingData } = state;\r\n\t    return {\r\n\t        settingData\r\n\t    }\r\n\t});\r\n\r\n\tconst { manufacturerInput, deleteManufacturer, addManufacturer, manufacturerTotalDa, renderTem } = useSetTing(formTab);\r\n\t\r\n\tuseCreated(() => {\r\n\t    formTab.current.setFieldsValue(data.settingData);\r\n\t});\r\n\r\n\t// 表单提交\r\n\tconst onFinish = (values: TabelType) => {\r\n\t    let dataValue = Object.assign(data.settingData, values);\r\n\t    mutations.changeSetting(dataValue);\r\n\t    localStorage.setItem('setData', JSON.stringify(dataValue));\r\n\t    message.success('修改成功');\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Form {...layout} ref={ formTab } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n\t\t\t     {\r\n\t\t\t        unitsConfig.map(res => {\r\n\t\t\t            return (\r\n\t\t\t                <ManufacturerStyle key={res.key}>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Form.Item name={res.key} label={res.val} >\r\n\t\t\t\t\t\t\t\t\t\t{ res.type?<Input />: <Input readOnly /> }\r\n\t\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t{ res.type?\"\": (\r\n\t\t\t\t\t\t\t\t\t<Modals>\r\n\t\t\t\t\t\t\t\t\t\t<ModalsContext>\r\n\t\t\t\t\t\t\t\t\t\t\t{ renderTem(res) }\r\n\t\t\t\t\t\t\t\t\t\t</ModalsContext>\r\n\t\t\t\t\t\t\t\t\t</Modals>\r\n\t\t\t\t\t\t\t\t) }\r\n\t\t\t                </ManufacturerStyle>\r\n\t\t\t            )\r\n\t\t\t        })\r\n\t\t\t    }\r\n\t\t\t    <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n\t\t\t        <Button type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\t\t确认提交\r\n\t\t\t        </Button>\r\n\t\t\t    </Form.Item>\r\n\t\t\t</Form>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default memo(Units);\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};","D:\\demoTestCopy\\src\\page\\demo\\setting\\customSetting.tsx",["433","434"],"import React, {memo, useRef, useState} from 'react';\r\nimport {Button, Form, Input, message} from \"antd\";\r\nimport {LayoutStyle, ManufacturerStyle, ModalsContext} from \"./resources/style\";\r\nimport {useCreated, useUpdate} from \"../../../utils/hooks\";\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {Modals} from \"../component/Modal\"\r\nimport { material, TabelType } from \"./resources/data\";\r\n\r\nconst CustomSetting = () => {\r\n    const formTab: any = useRef(null);\r\n    // 生产厂家追加数据\r\n    const [manufacturerDa, setManufacturerDa] = useState({});\r\n\r\n    const updateTem = useUpdate();\r\n    const data = useStore((store: Store) => {\r\n        const {state} = store;\r\n        const {settingData} = state;\r\n        return {\r\n            settingData\r\n        }\r\n    });\r\n    // 生产厂家总数据\r\n    const [manufacturerTotalDa, setManufacturerTotalDa] = useState<any>(data.settingData || []);\r\n\r\n    useCreated(() => {\r\n        formTab.current.setFieldsValue(data.settingData)\r\n        formTab.current.setFieldsValue({manufacturer: manufacturerTotalDa})\r\n    });\r\n\r\n    // 输入框事件\r\n    function manufacturerInput(key: string) {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        let manufacturerDaCopy: any = manufacturerDa;\r\n        manufacturerDaCopy[key] = e.target.value;\r\n        setManufacturerDa(manufacturerDaCopy);\r\n    }\r\n\r\n    // 表单提交\r\n    const onFinish = (values: TabelType) => {\r\n        // 生产厂家绑定材料\r\n        const manufacturerMaterial = data.settingData.manufacturerMaterial || {};\r\n\r\n        if (manufacturerMaterial[values.material + 'Material']) {\r\n            manufacturerMaterial[values.material + 'Material'].push(values.manufacturer);\r\n        } else {\r\n            manufacturerMaterial[values.material + 'Material'] = values.manufacturer;\r\n        }\r\n\r\n        let dataValue = Object.assign(data.settingData, values, manufacturerMaterial);\r\n        mutations.changeSetting(dataValue);\r\n        localStorage.setItem('setData', JSON.stringify(dataValue));\r\n        message.success('修改成功');\r\n    }\r\n\r\n    const addManufacturer = (key?: string | undefined) => {\r\n        // @ts-ignore\r\n        if (!manufacturerTotalDa[key]) {\r\n            // @ts-ignore\r\n            manufacturerTotalDa[key] = [];\r\n        }\r\n        // @ts-ignore\r\n        if (manufacturerTotalDa[key].includes(manufacturerDa[key])) {\r\n            message.success('重复添加了哦');\r\n        } else {\r\n            console.log(manufacturerTotalDa);\r\n            // @ts-ignore\r\n            let arr: any = manufacturerTotalDa;\r\n            // @ts-ignore\r\n            arr[key].push(manufacturerDa[key]);\r\n            setManufacturerTotalDa(arr);\r\n            updateTem();\r\n            formTab.current.setFieldsValue(arr)\r\n        }\r\n    }\r\n\r\n    // 删除每项\r\n    const deleteManufacturer = (da: any, key: string) => {\r\n        const arr = manufacturerTotalDa;\r\n        const index = manufacturerTotalDa[key].indexOf(da);\r\n        arr[key].splice(index, 1);\r\n        setManufacturerTotalDa(arr);\r\n        updateTem();\r\n        formTab.current.setFieldsValue({manufacturer: arr})\r\n    }\r\n\r\n    return (\r\n        <LayoutStyle>\r\n            <div>\r\n                <Form ref={formTab} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n\r\n                    {\r\n                        material.map(res => {\r\n                            return (\r\n                                <ManufacturerStyle key={res.key}>\r\n\r\n                                        <div className=\"inputView\">\r\n                                            <Form.Item name={!res.type?res.key + \"Material\": res.key} label={res.val}>\r\n                                                <Input readOnly/>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                        <Modals test={addManufacturer} da={!res.type?res.key + \"Material\": res.key}>\r\n                                            <ModalsContext>\r\n                                                <div>\r\n                                                    <p>输入：</p>\r\n                                                    <Input allowClear={true} onInput={() => manufacturerInput(!res.type?res.key + \"Material\": res.key)}></Input>\r\n                                                    <p></p>\r\n                                                    <Button onClick={() => {\r\n                                                        addManufacturer(!res.type?res.key + \"Material\": res.key)\r\n                                                    }}>添加</Button>\r\n                                                </div>\r\n                                                <div>\r\n                                                    {\r\n                                                        manufacturerTotalDa[!res.type?res.key + \"Material\": res.key] && manufacturerTotalDa[!res.type?res.key + \"Material\": res.key].map((item: any) => {\r\n                                                            return (\r\n                                                                <p key={item}>\r\n                                                                    <span>\"{item}\"</span>\r\n                                                                    <Button onClick={() => deleteManufacturer(item, !res.type?res.key + \"Material\": res.key)}>删除</Button>\r\n                                                                </p>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </div>\r\n                                            </ModalsContext>\r\n                                        </Modals>\r\n                                </ManufacturerStyle>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            确认提交\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </LayoutStyle>\r\n    );\r\n}\r\n\r\nexport default memo(CustomSetting);\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};","D:\\demoTestCopy\\src\\page\\demo\\setting\\projectCost.tsx",["435","436","437"],"import React, { memo, useRef, useState } from 'react';\r\nimport {Button, Form, Input, message} from \"antd\";\r\nimport {useCreated, useUpdate} from \"../../../utils/hooks\";\r\nimport {mutations, Store} from \"../../../store/vueStore\";\r\nimport {useStore} from \"../../../store/vueStore/store\";\r\nimport {Modals} from \"../component/Modal\"\r\nimport {ManufacturerStyle, ModalsContext} from \"./resources/style\";\r\nimport { unitsConfig, TabelType, UnitsConfig } from \"./resources/data\"\r\n\r\n// 弃用。。。。。\r\nconst Units = () => {\r\n    const formTab: any = useRef(null);\r\n    const updateTem = useUpdate();\r\n    const data = useStore((store: Store) => {\r\n        const { state } = store;\r\n        const { settingData } = state;\r\n        return {\r\n            settingData\r\n        }\r\n    });\r\n\r\n    const [manufacturerDa, setManufacturerDa] = useState({});// 追加数据\r\n    const [manufacturerTotalDa, setManufacturerTotalDa] = useState<any>(data.settingData || []);// 总数据\r\n\r\n    useCreated(() => {\r\n        formTab.current.setFieldsValue(data.settingData);\r\n    });\r\n\r\n    // 输入框事件\r\n    function manufacturerInput (key: string) {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        let manufacturerDaCopy: any = manufacturerDa;\r\n        console.log(manufacturerDa, key)\r\n        manufacturerDaCopy[key] = e.target.value;\r\n        setManufacturerDa(manufacturerDaCopy);\r\n    }\r\n\r\n    // 表单提交\r\n    const onFinish = (values: TabelType) => {\r\n        let dataValue = Object.assign(data.settingData, values);\r\n        mutations.changeSetting(dataValue);\r\n        console.log(dataValue)\r\n        localStorage.setItem('setData', JSON.stringify(dataValue));\r\n        message.success('修改成功');\r\n    }\r\n\r\n    // 添加数据 -- 录入数据\r\n    const addManufacturer = (key?: string | undefined) => {\r\n        // debugger\r\n        console.log(manufacturerDa, key)\r\n        // @ts-ignore\r\n        if (!manufacturerTotalDa[key]) {\r\n            // @ts-ignore\r\n            manufacturerTotalDa[key] = [];\r\n        }\r\n        // @ts-ignore\r\n        if (manufacturerTotalDa[key].includes(manufacturerDa[key])) {\r\n            message.success('重复添加了哦');\r\n        }\r\n        else {\r\n            console.log(manufacturerTotalDa);\r\n            // @ts-ignore\r\n            let arr: any = manufacturerTotalDa;\r\n            console.log(arr);\r\n            console.log(data.settingData)\r\n            // @ts-ignore\r\n            arr[key].push(manufacturerDa[key]);\r\n            setManufacturerTotalDa(arr);\r\n            console.log(arr)\r\n            updateTem();\r\n            formTab.current.setFieldsValue(arr)\r\n        }\r\n    }\r\n\r\n    // 删除每项\r\n    const deleteManufacturer = (da: any, key: string) => {\r\n        const arr = manufacturerTotalDa;\r\n        console.log(da, arr, arr[key], key)\r\n        const index = manufacturerTotalDa[key].indexOf(da);\r\n        arr[key].splice(index, 1);\r\n        console.log(arr[key], index, da)\r\n        setManufacturerTotalDa(arr);\r\n        updateTem();\r\n        formTab.current.setFieldsValue({manufacturer: arr})\r\n    }\r\n\r\n    // 是否渲染动态录入模块\r\n    const renderTem = (res: UnitsConfig) => {\r\n        if (res.type) {\r\n            return \"\";\r\n        }\r\n        else {\r\n            return (\r\n                <ModalsContext>\r\n                    <div>\r\n                        <p>输入：</p>\r\n                        <Input onInput={() => manufacturerInput(res.key)}></Input>\r\n                        <p></p>\r\n                        <Button onClick={ () => {addManufacturer(res.key)} }>添加</Button>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            manufacturerTotalDa[res.key] && manufacturerTotalDa[res.key].constructor == Array && manufacturerTotalDa[res.key].map((item: any) => {\r\n                                return (\r\n                                    <p key={item}>\r\n\t\t\t\t\t\t\t\t\t\t <span>\"{ item }\" </span>\r\n                                        <Button onClick={() => deleteManufacturer(item, res.key)}>删除</Button>\r\n\t\t\t\t\t\t\t\t\t</p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </ModalsContext>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form {...layout} ref={ formTab } name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                {\r\n                    unitsConfig.map(res => {\r\n                        return (\r\n                            <ManufacturerStyle key={res.key}>\r\n                                <div>\r\n                                    <Form.Item name={res.key} label={res.val} >\r\n                                        { res.type?<Input />: <Input readOnly /> }\r\n                                    </Form.Item>\r\n                                </div>\r\n                                <Modals>\r\n                                    <ModalsContext>\r\n                                        { renderTem(res) }\r\n                                    </ModalsContext>\r\n                                </Modals>\r\n                            </ManufacturerStyle>\r\n                        )\r\n                    })\r\n                }\r\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        确认提交1\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(Units);\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 12 },\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};","D:\\demoTestCopy\\src\\page\\demo\\component\\Modal.tsx",["438"],"import React, { useState, memo } from 'react';\r\nimport {Modal, Button, Space} from 'antd';\r\n\r\nconst ModalView = ({ children }: any) => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Space size=\"middle\">\r\n                <a onClick={showModal}>查看</a>\r\n            </Space>\r\n            <Modal title=\"详细\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={ '80%' }>\r\n                { children }\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(ModalView);\r\n\r\n// 设置弹框\r\nexport const Modals = ( { children}: any ) => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                录入\r\n            </Button>\r\n            <Modal title=\"录入\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                { children }\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\ntype Callback<T> = () => T;\r\n\r\n// 日期到期弹框 | 共用\r\nexport function MaturityModal<T> (callBack?: Callback<T> | any)  {\r\n    const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    function handleOk() {\r\n        setIsModalVisible(false);\r\n        callBack && callBack();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const Modals = ({children, title, width}: any) => {\r\n        return (\r\n            <>\r\n                <Modal width={width} title={ title } visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    { children }\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return {\r\n        showModal,\r\n        handleOk,\r\n        Modals\r\n    }\r\n}","D:\\demoTestCopy\\src\\page\\demo\\component\\tabel.tsx",["439","440","441","442","443","444","445"],"import React, {memo} from \"react\";\r\nimport {mutations, StatesData} from \"../../../store/vueStore\";\r\nimport {Space, Table, message } from \"antd\";\r\nimport ModalView from \"./Modal\";\r\nimport DescriptionsList from \"./Descriptions\";\r\nimport { BlockSort, ChangeBut, DataTransfer } from \"../hooks/componentHooks\"\r\n\r\ntype TableDaType = {\r\n    tabel: any\r\n}\r\n\r\nconst TableDa: React.FC<TableDaType> = ({ tabel }) => {\r\n    const [tabelData, setTabelData] = tabel;\r\n    const [checkStrictly, setCheckStrictly] = React.useState<boolean>(false);\r\n\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys: any, selectedRows: StatesData) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n            if (selectedRows.length > 0) {\r\n\r\n                const arrDataList = selectedRows.reduce((total: any, val: StatesData) => {\r\n                    if (val.keyName === \"waterproof\") {\r\n                        BlockSort(total, val, 10000, \"㎡\");\r\n                    }\r\n                    else if (val.keyName === \"switch\") {\r\n                        BlockSort(total, val, 300);\r\n                    }\r\n                    else if (val.keyName === \"sleeve\") {\r\n                        BlockSort(total, val, 500);\r\n                    }\r\n                    else if (val.keyName === \"mortar\") {\r\n                        if (val.sampleName == \"干混砌筑砂浆\") {\r\n                            BlockSort(total, val, 100, 't');\r\n                        }\r\n                        else {\r\n                            BlockSort(total, val, 50, 'm³');\r\n                        }\r\n                    }\r\n                    else if (val.keyName === \"reinforc\") {\r\n                        BlockSort(total, val, 60, 't');\r\n                    }\r\n                    else if (val.keyName === \"plainSoil\") {\r\n                        BlockSort(total, val, 3);\r\n                    }\r\n                    else if (val.keyName === \"concrete\") {\r\n                        if (val.permeabilityBar) {\r\n                            BlockSort(total, val, 500, \"m³\");\r\n                        }\r\n                        else {\r\n                            if (val.maintenance == \"标准养护\") {\r\n                                BlockSort(total, val, 100, 'm³');\r\n                            }\r\n                            else if (val.maintenance == \"同条件养护\") {\r\n                                BlockSort(total, val, 2000, 'm³');\r\n                            }\r\n                            else {\r\n                                BlockSort(total, val, 20000000000, 'm³');\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (val.keyName === \"brick\") {\r\n                        if ([\"烧结砖空心砖\", \"烧结多孔砖\", \"烧结普通砖\"].includes(val.category)) {\r\n                            BlockSort(total, val, 150000);\r\n                        }\r\n                        else if ([\"承重混凝土多孔砖\", \"混凝土普通砖\", \"混凝土实心砖\", \"蒸汽加压混凝土砌块\"].includes(val.category)) {\r\n                            BlockSort(total, val, 100000);\r\n                        }\r\n                        else {\r\n                            BlockSort(total, val, 15000);\r\n                        }\r\n                    }\r\n                    else if (val.keyName === \"permeability\") {\r\n                        BlockSort(total, val, 500, 'm³');\r\n                    }\r\n                    else {\r\n                        total[val.keyName].push(val);\r\n                    }\r\n                    return total;\r\n                }, {\r\n                    concrete: [],\r\n                    brick: [],\r\n                    waterproof: [],\r\n                    switch: [],\r\n                    sleeve: [],\r\n                    mortar: [],\r\n                    ringKnife: [],\r\n                    plainSoil: [],\r\n                    dust: [],\r\n                    reinforc: [],\r\n                    permeability: []\r\n                })\r\n\r\n                const objData: any = {};\r\n                Object.keys(arrDataList).map(res => {\r\n                    if (arrDataList[res].length > 0) {\r\n                        objData[res] = arrDataList[res];\r\n                    }\r\n                });\r\n                console.log(objData)\r\n                mutations.addCeckTabel(objData);\r\n            }\r\n            else {\r\n                mutations.addCeckTabel(\"\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const deleteRows = (key: string) => {\r\n        let arr = localStorage.getItem(\"tabelData\");\r\n        let newArr: typeof tabelData = [];\r\n        arr && JSON.parse(arr).map((res: typeof tabelData) => {\r\n            if (res.key !== key) {\r\n                newArr.push(res);\r\n            }\r\n        });\r\n        setTabelData(newArr);\r\n        mutations.deleteFormData(newArr);\r\n        message.success('删除成功');\r\n        localStorage.setItem('tabelData', JSON.stringify(newArr));\r\n    }\r\n\r\n     const columns: StatesData = [\r\n        {\r\n            title: '序号',\r\n            dataIndex: 'index',\r\n            key: 'index',\r\n            align: 'center',\r\n            width: 50,\r\n            render: (text: string, record: any, index: number) => `${index+1}`,\r\n        },\r\n        {\r\n            title: '试样名称',\r\n            dataIndex: 'sampleName',\r\n            key: 'sampleName',\r\n        },\r\n        {\r\n            title: '使用部位·具体部位范围',\r\n            dataIndex: 'useParts',\r\n            key: 'useParts',\r\n        },\r\n        {\r\n            title: '进场时间',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n        },\r\n        {\r\n            title: '型号规格',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n        },\r\n        {\r\n            title: '生产厂家',\r\n            dataIndex: 'manufacturer',\r\n            key: 'manufacturer',\r\n        },\r\n        {\r\n            title: '供销单位',\r\n            dataIndex: 'supplyMarket',\r\n            key: 'supplyMarket',\r\n        },\r\n        {\r\n            title: '取（制）样数量',\r\n            dataIndex: 'groupNum',\r\n            key: 'groupNum',\r\n        },\r\n        {\r\n            title: '代表批量',\r\n            dataIndex: 'batch',\r\n            key: 'batch',\r\n        },\r\n        {\r\n            title: '养护条件',\r\n            dataIndex: 'maintenance',\r\n            key: 'maintenance',\r\n            render: (text: string) => <span>{ text }</span>\r\n        },\r\n         {\r\n             title: '委托单编号',\r\n             dataIndex: 'orderNo',\r\n             key: 'orderNo'\r\n         },\r\n         {\r\n             title: '报告编号',\r\n             dataIndex: 'reportNumber',\r\n             key: 'reportNumber',\r\n         },\r\n        {\r\n            title: '资料交接情况',\r\n            dataIndex: 'dataTransfer',\r\n            key: 'dataTransfer',\r\n            render: (text: number | undefined, record: StatesData) => (\r\n                <>\r\n                    <DataTransfer daKey={record.key} tabel={tabel} val={text || 1}></DataTransfer>\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            title: '是否导出',\r\n            dataIndex: 'isExport',\r\n            key: 'isExport',\r\n            render: (text: boolean | undefined) => (\r\n                <>\r\n                    {text?\"已导出\": \"未导出\"}\r\n                </>\r\n            )\r\n        },\r\n         {\r\n             title: '温度',\r\n             dataIndex: 'temp',\r\n             key: 'temp'\r\n         },\r\n        {\r\n            title: '操作',\r\n            key: 'action',\r\n            render: (text: string, record: StatesData) => (\r\n                <>\r\n                    <ModalView>\r\n                        <DescriptionsList title={ record.name } dataList={ record }></DescriptionsList>\r\n                    </ModalView>\r\n                    <Space size=\"middle\">\r\n                            <ChangeBut dataList={record} tabel={tabel} keys=\"reportNumber\" title=\"报告编号\"/>\r\n                            <ChangeBut dataList={record} tabel={tabel} keys=\"orderNo\" title=\"委托单号\"/>\r\n                        <a onClick={() => deleteRows(record.key)}>删除</a>\r\n                    </Space>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Table\r\n                columns={columns}\r\n                rowSelection={{ ...rowSelection, checkStrictly }}\r\n                pagination={{'pageSize': 6}}\r\n                dataSource={tabelData}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(TableDa);","D:\\demoTestCopy\\src\\page\\demo\\hooks\\index.tsx",["446","447"],"D:\\demoTestCopy\\src\\utils\\request.ts",[],"D:\\demoTestCopy\\src\\page\\demo\\component\\Descriptions.tsx",[],"D:\\demoTestCopy\\src\\page\\demo\\temperature\\index.tsx",[],"D:\\demoTestCopy\\src\\page\\demo\\component\\radio.tsx",[],"D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\style.ts",[],"D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\data.ts",[],"D:\\demoTestCopy\\src\\page\\demo\\setting\\resources\\hooks.tsx",["448","449"],"import {useStore} from \"../../../../store/vueStore/store\";\r\nimport {Store} from \"../../../../store/vueStore\";\r\nimport React, {useState} from \"react\";\r\nimport {UnitsConfig} from \"./data\";\r\nimport {ModalsContext} from \"./style\";\r\nimport {Button, Input, message} from \"antd\";\r\nimport {useUpdate} from \"../../../../utils/hooks\";\r\n\r\nexport function useSetTing (formTab: any) {\r\n    const data = useStore((store: Store) => {\r\n        const { state } = store;\r\n        const { settingData } = state;\r\n        return {\r\n            settingData\r\n        }\r\n    });\r\n    const updateTem = useUpdate();\r\n\r\n    // 追加数据\r\n    const [manufacturerDa, setManufacturerDa] = useState({});\r\n\r\n    // 总数据\r\n    const [manufacturerTotalDa, setManufacturerTotalDa] = useState<any>(data.settingData || []);\r\n\r\n    // 输入框事件\r\n    function manufacturerInput (key: string) {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        let manufacturerDaCopy: any = manufacturerDa;\r\n        manufacturerDaCopy[key] = e.target.value;\r\n        setManufacturerDa(manufacturerDaCopy);\r\n    }\r\n\r\n    // 添加数据 -- 录入数据\r\n    const addManufacturer = (key?: string | undefined) => {\r\n        // @ts-ignore\r\n        if (!manufacturerTotalDa[key]) {\r\n            // @ts-ignore\r\n            manufacturerTotalDa[key] = [];\r\n        }\r\n        // @ts-ignore\r\n        if (manufacturerTotalDa[key].includes(manufacturerDa[key])) {\r\n            message.success('重复添加了哦');\r\n        }\r\n        else {\r\n            // @ts-ignore\r\n            let arr: any = manufacturerTotalDa;\r\n            // @ts-ignore\r\n            arr[key].push(manufacturerDa[key]);\r\n            setManufacturerTotalDa(arr);\r\n\r\n            updateTem();\r\n            formTab.current.setFieldsValue(arr)\r\n        }\r\n    }\r\n\r\n    // 删除每项\r\n    const deleteManufacturer = (da: any, key: string) => {\r\n        const arr = manufacturerTotalDa;\r\n        const index = manufacturerTotalDa[key].indexOf(da);\r\n        arr[key].splice(index, 1);\r\n        setManufacturerTotalDa(arr);\r\n        updateTem();\r\n        formTab.current.setFieldsValue({manufacturer: arr})\r\n    }\r\n\r\n    // 是否渲染动态录入模块\r\n    const renderTem = (res: UnitsConfig) => {\r\n        if (res.type) {\r\n            return \"\";\r\n        }\r\n        else {\r\n            return (\r\n                <ModalsContext>\r\n                    <div>\r\n                        <p>输入：</p>\r\n                        <Input allowClear={true} onInput={() => manufacturerInput(res.key)}></Input>\r\n                        <p></p>\r\n                        <Button onClick={ () => {addManufacturer(res.key)} }>添加</Button>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            manufacturerTotalDa[res.key] && manufacturerTotalDa[res.key].constructor == Array && manufacturerTotalDa[res.key].map((item: any) => {\r\n                                return (\r\n                                    <p key={item}>\r\n                                        <span>\"{ item }\" </span>\r\n                                        <Button onClick={() => deleteManufacturer(item, res.key)}>删除</Button>\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </ModalsContext>\r\n            )\r\n        }\r\n    }\r\n\r\n    return {\r\n        manufacturerInput,\r\n        deleteManufacturer,\r\n        addManufacturer,\r\n        manufacturerTotalDa,\r\n        renderTem\r\n    }\r\n}","D:\\demoTestCopy\\src\\page\\demo\\hooks\\componentHooks.tsx",["450","451","452","453","454","455","456","457","458"],"import React, {memo} from \"react\";\r\nimport {StatesData} from \"../../../store/vueStore\";\r\nimport {Space, Radio, Table, Input, message } from \"antd\";\r\nimport { MaturityModal } from \"../component/Modal\";\r\n\r\n\r\n// 根据批量生成下一组\r\nexport const BlockSort = (total: any, val: StatesData, num: number, unit: string = \"\") => {\r\n    let ind = total[val.keyName].length;\r\n    const batch = val.batch;\r\n    if (batch > num) {\r\n        for (let i = 0; i <= Math.floor(batch/num); i++) {\r\n            if ((batch - (num * i) > num? num : batch - (num * i)) == 0) return;\r\n            let obj: any = {};\r\n            Object.keys(val).map(res => {\r\n                obj[res] = val[res];\r\n                obj['index'] = ind + i;\r\n                obj['batch'] = (batch - (num * i) > num? num : batch - (num * i));\r\n                obj['limit'] = num;\r\n                obj['unit'] = unit;\r\n            });\r\n            total[val.keyName].push(obj);\r\n        }\r\n    }\r\n    else {\r\n        val.index = Math.abs( ind );\r\n        total[val.keyName].push(JSON.parse(JSON.stringify(val)));\r\n    }\r\n}\r\n\r\n\r\n// 修改温度BUT 改为修改报告编号\r\nexport const ChangeBut = ({ dataList, tabel, keys, title }: any) => {\r\n    const [tabelData, setTabelData] = tabel;\r\n    // 温度值\r\n    let num = 0;\r\n\r\n    const { showModal,  Modals } = MaturityModal(() => {\r\n        console.log(num, dataList);\r\n        const arr = [...tabelData];\r\n        arr.map((res: typeof tabelData) => {\r\n            if (res.key === dataList.key) {\r\n                res[keys] = num;\r\n            }\r\n        });\r\n        setTabelData(arr);\r\n        message.success('修改成功');\r\n        localStorage.setItem('tabelData', JSON.stringify(tabelData));\r\n    });\r\n\r\n    function changeInput () {\r\n        const e = window.event || arguments.callee.caller.arguments[1];\r\n        num = e.target.value;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modals title={title  + \"修改\"} width={300}>\r\n                { title }： <Input placeholder={\"请输入您要修改的\" + title } onInput={ changeInput } defaultValue={ dataList[keys] }/>\r\n            </Modals>\r\n            <a style={{marginLeft: \"10px\"}} onClick={ showModal }>修改{ title }</a>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// 资料交接情况\r\nexport const DataTransfer = ({ daKey, tabel, val }: any) => {\r\n    const [value, setValue] = React.useState<number>(val);\r\n    const [tabelData, setTabelData] = tabel;\r\n\r\n    function onChange (e: any) {\r\n        setValue(e.target.value);\r\n        const arr = [...tabelData];\r\n        arr.map((res: typeof tabelData) => {\r\n            if (res.key === daKey) {\r\n                res.dataTransfer = e.target.value;\r\n            }\r\n        });\r\n        setTabelData(arr);\r\n        message.success('修改成功');\r\n        localStorage.setItem('tabelData', JSON.stringify(tabelData));\r\n    };\r\n\r\n    return (\r\n        <Radio.Group onChange={onChange} value={value}>\r\n            <Radio value={1}>监理</Radio>\r\n            <Radio value={2}>资料员</Radio>\r\n        </Radio.Group>\r\n    );\r\n}",{"ruleId":"459","severity":1,"message":"460","line":5,"column":10,"nodeType":"461","messageId":"462","endLine":5,"endColumn":22},{"ruleId":"459","severity":1,"message":"463","line":6,"column":8,"nodeType":"461","messageId":"462","endLine":6,"endColumn":15},{"ruleId":"464","severity":1,"message":"465","line":47,"column":29,"nodeType":"466","messageId":"467","endLine":47,"endColumn":68},{"ruleId":"464","severity":1,"message":"465","line":47,"column":82,"nodeType":"466","messageId":"467","endLine":47,"endColumn":121},{"ruleId":"464","severity":1,"message":"465","line":48,"column":27,"nodeType":"466","messageId":"467","endLine":48,"endColumn":68},{"ruleId":"464","severity":1,"message":"465","line":48,"column":82,"nodeType":"466","messageId":"467","endLine":48,"endColumn":123},{"ruleId":"468","severity":1,"message":"469","line":19,"column":1,"nodeType":"470","endLine":22,"endColumn":3},{"ruleId":"471","severity":1,"message":"472","line":23,"column":7,"nodeType":"461","messageId":"462","endLine":23,"endColumn":20},{"ruleId":"473","severity":1,"message":"474","line":41,"column":44,"nodeType":"475","messageId":"476","endLine":41,"endColumn":46},{"ruleId":"473","severity":1,"message":"474","line":88,"column":110,"nodeType":"475","messageId":"476","endLine":88,"endColumn":112},{"ruleId":"473","severity":1,"message":"474","line":94,"column":126,"nodeType":"475","messageId":"476","endLine":94,"endColumn":128},{"ruleId":"473","severity":1,"message":"474","line":104,"column":116,"nodeType":"475","messageId":"476","endLine":104,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":124,"column":110,"nodeType":"475","messageId":"476","endLine":124,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":144,"column":15,"nodeType":"479","messageId":"480","endLine":144,"endColumn":38},{"ruleId":"481","severity":1,"message":"482","line":45,"column":54,"nodeType":"483","messageId":"484","endLine":45,"endColumn":56},{"ruleId":"473","severity":1,"message":"474","line":95,"column":109,"nodeType":"475","messageId":"476","endLine":95,"endColumn":111},{"ruleId":"473","severity":1,"message":"474","line":110,"column":109,"nodeType":"475","messageId":"476","endLine":110,"endColumn":111},{"ruleId":"473","severity":1,"message":"474","line":110,"column":153,"nodeType":"475","messageId":"476","endLine":110,"endColumn":155},{"ruleId":"485","severity":1,"message":"486","line":138,"column":35,"nodeType":"487","messageId":"476","endLine":138,"endColumn":51},{"ruleId":"481","severity":1,"message":"482","line":144,"column":23,"nodeType":"483","messageId":"484","endLine":144,"endColumn":25},{"ruleId":"473","severity":1,"message":"474","line":145,"column":33,"nodeType":"475","messageId":"476","endLine":145,"endColumn":35},{"ruleId":"473","severity":1,"message":"474","line":157,"column":24,"nodeType":"475","messageId":"476","endLine":157,"endColumn":26},{"ruleId":"473","severity":1,"message":"474","line":167,"column":26,"nodeType":"475","messageId":"476","endLine":167,"endColumn":28},{"ruleId":"473","severity":1,"message":"474","line":28,"column":25,"nodeType":"475","messageId":"476","endLine":28,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":31,"column":30,"nodeType":"475","messageId":"476","endLine":31,"endColumn":32},{"ruleId":"481","severity":1,"message":"482","line":45,"column":50,"nodeType":"483","messageId":"484","endLine":45,"endColumn":52},{"ruleId":"473","severity":1,"message":"474","line":49,"column":33,"nodeType":"475","messageId":"476","endLine":49,"endColumn":35},{"ruleId":"473","severity":1,"message":"474","line":55,"column":38,"nodeType":"475","messageId":"476","endLine":55,"endColumn":40},{"ruleId":"473","severity":1,"message":"474","line":55,"column":57,"nodeType":"475","messageId":"476","endLine":55,"endColumn":59},{"ruleId":"473","severity":1,"message":"474","line":56,"column":31,"nodeType":"475","messageId":"476","endLine":56,"endColumn":33},{"ruleId":"488","severity":1,"message":"489","line":60,"column":36,"nodeType":"475","messageId":"490","endLine":60,"endColumn":37},{"ruleId":"481","severity":1,"message":"482","line":71,"column":50,"nodeType":"483","messageId":"484","endLine":71,"endColumn":52},{"ruleId":"473","severity":1,"message":"474","line":72,"column":25,"nodeType":"475","messageId":"476","endLine":72,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":72,"column":39,"nodeType":"475","messageId":"476","endLine":72,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":79,"column":43,"nodeType":"475","messageId":"476","endLine":79,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":79,"column":76,"nodeType":"475","messageId":"476","endLine":79,"endColumn":78},{"ruleId":"473","severity":1,"message":"474","line":81,"column":33,"nodeType":"475","messageId":"476","endLine":81,"endColumn":35},{"ruleId":"473","severity":1,"message":"474","line":87,"column":38,"nodeType":"475","messageId":"476","endLine":87,"endColumn":40},{"ruleId":"473","severity":1,"message":"474","line":87,"column":57,"nodeType":"475","messageId":"476","endLine":87,"endColumn":59},{"ruleId":"473","severity":1,"message":"474","line":88,"column":31,"nodeType":"475","messageId":"476","endLine":88,"endColumn":33},{"ruleId":"473","severity":1,"message":"474","line":92,"column":36,"nodeType":"475","messageId":"476","endLine":92,"endColumn":38},{"ruleId":"473","severity":1,"message":"474","line":92,"column":76,"nodeType":"475","messageId":"476","endLine":92,"endColumn":78},{"ruleId":"473","severity":1,"message":"474","line":162,"column":110,"nodeType":"475","messageId":"476","endLine":162,"endColumn":112},{"ruleId":"473","severity":1,"message":"474","line":176,"column":116,"nodeType":"475","messageId":"476","endLine":176,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":194,"column":110,"nodeType":"475","messageId":"476","endLine":194,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":259,"column":15,"nodeType":"479","messageId":"480","endLine":259,"endColumn":38},{"ruleId":"471","severity":1,"message":"491","line":1,"column":16,"nodeType":"461","messageId":"462","endLine":1,"endColumn":26},{"ruleId":"471","severity":1,"message":"492","line":1,"column":28,"nodeType":"461","messageId":"462","endLine":1,"endColumn":42},{"ruleId":"471","severity":1,"message":"493","line":1,"column":44,"nodeType":"461","messageId":"462","endLine":1,"endColumn":61},{"ruleId":"471","severity":1,"message":"494","line":1,"column":69,"nodeType":"461","messageId":"462","endLine":1,"endColumn":81},{"ruleId":"471","severity":1,"message":"495","line":1,"column":83,"nodeType":"461","messageId":"462","endLine":1,"endColumn":92},{"ruleId":"471","severity":1,"message":"496","line":2,"column":9,"nodeType":"461","messageId":"462","endLine":2,"endColumn":19},{"ruleId":"471","severity":1,"message":"497","line":46,"column":24,"nodeType":"461","messageId":"462","endLine":46,"endColumn":25},{"ruleId":"481","severity":1,"message":"482","line":57,"column":42,"nodeType":"483","messageId":"484","endLine":57,"endColumn":44},{"ruleId":"481","severity":1,"message":"482","line":63,"column":62,"nodeType":"483","messageId":"484","endLine":63,"endColumn":64},{"ruleId":"473","severity":1,"message":"474","line":61,"column":40,"nodeType":"475","messageId":"476","endLine":61,"endColumn":42},{"ruleId":"473","severity":1,"message":"474","line":62,"column":42,"nodeType":"475","messageId":"476","endLine":62,"endColumn":44},{"ruleId":"473","severity":1,"message":"474","line":95,"column":106,"nodeType":"475","messageId":"476","endLine":95,"endColumn":108},{"ruleId":"473","severity":1,"message":"474","line":109,"column":116,"nodeType":"475","messageId":"476","endLine":109,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":137,"column":110,"nodeType":"475","messageId":"476","endLine":137,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":157,"column":15,"nodeType":"479","messageId":"480","endLine":157,"endColumn":38},{"ruleId":"473","severity":1,"message":"474","line":51,"column":38,"nodeType":"475","messageId":"476","endLine":51,"endColumn":40},{"ruleId":"473","severity":1,"message":"474","line":60,"column":30,"nodeType":"475","messageId":"476","endLine":60,"endColumn":32},{"ruleId":"473","severity":1,"message":"474","line":73,"column":20,"nodeType":"475","messageId":"476","endLine":73,"endColumn":22},{"ruleId":"473","severity":1,"message":"474","line":76,"column":25,"nodeType":"475","messageId":"476","endLine":76,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":79,"column":25,"nodeType":"475","messageId":"476","endLine":79,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":82,"column":25,"nodeType":"475","messageId":"476","endLine":82,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":85,"column":25,"nodeType":"475","messageId":"476","endLine":85,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":88,"column":25,"nodeType":"475","messageId":"476","endLine":88,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":91,"column":25,"nodeType":"475","messageId":"476","endLine":91,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":94,"column":25,"nodeType":"475","messageId":"476","endLine":94,"endColumn":27},{"ruleId":"473","severity":1,"message":"498","line":103,"column":19,"nodeType":"475","messageId":"476","endLine":103,"endColumn":21},{"ruleId":"473","severity":1,"message":"474","line":105,"column":23,"nodeType":"475","messageId":"476","endLine":105,"endColumn":25},{"ruleId":"473","severity":1,"message":"474","line":108,"column":28,"nodeType":"475","messageId":"476","endLine":108,"endColumn":30},{"ruleId":"473","severity":1,"message":"474","line":108,"column":48,"nodeType":"475","messageId":"476","endLine":108,"endColumn":50},{"ruleId":"473","severity":1,"message":"474","line":111,"column":28,"nodeType":"475","messageId":"476","endLine":111,"endColumn":30},{"ruleId":"473","severity":1,"message":"474","line":111,"column":51,"nodeType":"475","messageId":"476","endLine":111,"endColumn":53},{"ruleId":"473","severity":1,"message":"474","line":111,"column":72,"nodeType":"475","messageId":"476","endLine":111,"endColumn":74},{"ruleId":"473","severity":1,"message":"474","line":114,"column":28,"nodeType":"475","messageId":"476","endLine":114,"endColumn":30},{"ruleId":"473","severity":1,"message":"474","line":155,"column":104,"nodeType":"475","messageId":"476","endLine":155,"endColumn":106},{"ruleId":"473","severity":1,"message":"474","line":169,"column":116,"nodeType":"475","messageId":"476","endLine":169,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":193,"column":110,"nodeType":"475","messageId":"476","endLine":193,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":213,"column":15,"nodeType":"479","messageId":"480","endLine":213,"endColumn":38},{"ruleId":"485","severity":1,"message":"486","line":11,"column":35,"nodeType":"487","messageId":"476","endLine":11,"endColumn":51},{"ruleId":"471","severity":1,"message":"499","line":18,"column":13,"nodeType":"461","messageId":"462","endLine":18,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":24,"column":32,"nodeType":"475","messageId":"476","endLine":24,"endColumn":34},{"ruleId":"473","severity":1,"message":"474","line":27,"column":35,"nodeType":"475","messageId":"476","endLine":27,"endColumn":37},{"ruleId":"473","severity":1,"message":"474","line":80,"column":114,"nodeType":"475","messageId":"476","endLine":80,"endColumn":116},{"ruleId":"473","severity":1,"message":"474","line":90,"column":116,"nodeType":"475","messageId":"476","endLine":90,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":114,"column":110,"nodeType":"475","messageId":"476","endLine":114,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":134,"column":15,"nodeType":"479","messageId":"480","endLine":134,"endColumn":38},{"ruleId":"481","severity":1,"message":"482","line":32,"column":39,"nodeType":"483","messageId":"484","endLine":32,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":91,"column":116,"nodeType":"475","messageId":"476","endLine":91,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":115,"column":110,"nodeType":"475","messageId":"476","endLine":115,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":135,"column":15,"nodeType":"479","messageId":"480","endLine":135,"endColumn":38},{"ruleId":"471","severity":1,"message":"500","line":57,"column":12,"nodeType":"461","messageId":"462","endLine":57,"endColumn":17},{"ruleId":"481","severity":1,"message":"482","line":82,"column":29,"nodeType":"483","messageId":"484","endLine":82,"endColumn":31},{"ruleId":"481","severity":1,"message":"482","line":98,"column":39,"nodeType":"483","messageId":"484","endLine":98,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":101,"column":37,"nodeType":"475","messageId":"476","endLine":101,"endColumn":39},{"ruleId":"473","severity":1,"message":"474","line":106,"column":37,"nodeType":"475","messageId":"476","endLine":106,"endColumn":39},{"ruleId":"473","severity":1,"message":"474","line":106,"column":57,"nodeType":"475","messageId":"476","endLine":106,"endColumn":59},{"ruleId":"473","severity":1,"message":"474","line":106,"column":126,"nodeType":"475","messageId":"476","endLine":106,"endColumn":128},{"ruleId":"481","severity":1,"message":"482","line":121,"column":41,"nodeType":"483","messageId":"484","endLine":121,"endColumn":43},{"ruleId":"473","severity":1,"message":"474","line":124,"column":45,"nodeType":"475","messageId":"476","endLine":124,"endColumn":47},{"ruleId":"481","severity":1,"message":"482","line":129,"column":59,"nodeType":"483","messageId":"484","endLine":129,"endColumn":61},{"ruleId":"473","severity":1,"message":"474","line":138,"column":39,"nodeType":"475","messageId":"476","endLine":138,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":155,"column":39,"nodeType":"475","messageId":"476","endLine":155,"endColumn":41},{"ruleId":"481","severity":1,"message":"482","line":156,"column":76,"nodeType":"483","messageId":"484","endLine":156,"endColumn":78},{"ruleId":"471","severity":1,"message":"501","line":158,"column":43,"nodeType":"461","messageId":"462","endLine":158,"endColumn":51},{"ruleId":"473","severity":1,"message":"474","line":182,"column":39,"nodeType":"475","messageId":"476","endLine":182,"endColumn":41},{"ruleId":"473","severity":1,"message":"498","line":186,"column":46,"nodeType":"475","messageId":"476","endLine":186,"endColumn":48},{"ruleId":"473","severity":1,"message":"474","line":197,"column":57,"nodeType":"475","messageId":"476","endLine":197,"endColumn":59},{"ruleId":"471","severity":1,"message":"502","line":204,"column":37,"nodeType":"461","messageId":"462","endLine":204,"endColumn":42},{"ruleId":"473","severity":1,"message":"474","line":209,"column":39,"nodeType":"475","messageId":"476","endLine":209,"endColumn":41},{"ruleId":"481","severity":1,"message":"482","line":210,"column":76,"nodeType":"483","messageId":"484","endLine":210,"endColumn":78},{"ruleId":"473","severity":1,"message":"498","line":213,"column":50,"nodeType":"475","messageId":"476","endLine":213,"endColumn":52},{"ruleId":"481","severity":1,"message":"482","line":230,"column":39,"nodeType":"483","messageId":"484","endLine":230,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":234,"column":30,"nodeType":"475","messageId":"476","endLine":234,"endColumn":32},{"ruleId":"473","severity":1,"message":"474","line":240,"column":30,"nodeType":"475","messageId":"476","endLine":240,"endColumn":32},{"ruleId":"473","severity":1,"message":"474","line":240,"column":102,"nodeType":"475","messageId":"476","endLine":240,"endColumn":104},{"ruleId":"473","severity":1,"message":"474","line":240,"column":135,"nodeType":"475","messageId":"476","endLine":240,"endColumn":137},{"ruleId":"471","severity":1,"message":"497","line":253,"column":29,"nodeType":"461","messageId":"462","endLine":253,"endColumn":30},{"ruleId":"481","severity":1,"message":"482","line":259,"column":39,"nodeType":"483","messageId":"484","endLine":259,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":268,"column":61,"nodeType":"475","messageId":"476","endLine":268,"endColumn":63},{"ruleId":"473","severity":1,"message":"474","line":268,"column":95,"nodeType":"475","messageId":"476","endLine":268,"endColumn":97},{"ruleId":"473","severity":1,"message":"474","line":268,"column":128,"nodeType":"475","messageId":"476","endLine":268,"endColumn":130},{"ruleId":"481","severity":1,"message":"482","line":287,"column":39,"nodeType":"483","messageId":"484","endLine":287,"endColumn":41},{"ruleId":"473","severity":1,"message":"474","line":291,"column":41,"nodeType":"475","messageId":"476","endLine":291,"endColumn":43},{"ruleId":"473","severity":1,"message":"474","line":296,"column":41,"nodeType":"475","messageId":"476","endLine":296,"endColumn":43},{"ruleId":"473","severity":1,"message":"474","line":296,"column":68,"nodeType":"475","messageId":"476","endLine":296,"endColumn":70},{"ruleId":"473","severity":1,"message":"474","line":296,"column":133,"nodeType":"475","messageId":"476","endLine":296,"endColumn":135},{"ruleId":"473","severity":1,"message":"474","line":367,"column":105,"nodeType":"475","messageId":"476","endLine":367,"endColumn":107},{"ruleId":"471","severity":1,"message":"500","line":48,"column":16,"nodeType":"461","messageId":"462","endLine":48,"endColumn":21},{"ruleId":"471","severity":1,"message":"503","line":49,"column":17,"nodeType":"461","messageId":"462","endLine":49,"endColumn":34},{"ruleId":"471","severity":1,"message":"504","line":49,"column":36,"nodeType":"461","messageId":"462","endLine":49,"endColumn":54},{"ruleId":"471","severity":1,"message":"505","line":49,"column":56,"nodeType":"461","messageId":"462","endLine":49,"endColumn":71},{"ruleId":"471","severity":1,"message":"506","line":49,"column":73,"nodeType":"461","messageId":"462","endLine":49,"endColumn":92},{"ruleId":"473","severity":1,"message":"474","line":120,"column":28,"nodeType":"475","messageId":"476","endLine":120,"endColumn":30},{"ruleId":"477","severity":1,"message":"478","line":151,"column":15,"nodeType":"479","messageId":"480","endLine":151,"endColumn":38},{"ruleId":"471","severity":1,"message":"507","line":1,"column":22,"nodeType":"461","messageId":"462","endLine":1,"endColumn":43},{"ruleId":"471","severity":1,"message":"508","line":1,"column":45,"nodeType":"461","messageId":"462","endLine":1,"endColumn":53},{"ruleId":"471","severity":1,"message":"500","line":16,"column":12,"nodeType":"461","messageId":"462","endLine":16,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":57,"column":106,"nodeType":"475","messageId":"476","endLine":57,"endColumn":108},{"ruleId":"473","severity":1,"message":"474","line":77,"column":116,"nodeType":"475","messageId":"476","endLine":77,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":101,"column":110,"nodeType":"475","messageId":"476","endLine":101,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":120,"column":38,"nodeType":"479","messageId":"480","endLine":120,"endColumn":61},{"ruleId":"471","severity":1,"message":"509","line":1,"column":8,"nodeType":"461","messageId":"462","endLine":1,"endColumn":13},{"ruleId":"471","severity":1,"message":"497","line":53,"column":16,"nodeType":"461","messageId":"462","endLine":53,"endColumn":17},{"ruleId":"510","severity":1,"message":"511","line":57,"column":5,"nodeType":"461","endLine":57,"endColumn":14,"suggestions":"512"},{"ruleId":"510","severity":1,"message":"513","line":71,"column":7,"nodeType":"514","endLine":71,"endColumn":9,"suggestions":"515"},{"ruleId":"510","severity":1,"message":"513","line":79,"column":7,"nodeType":"514","endLine":79,"endColumn":9,"suggestions":"516"},{"ruleId":"510","severity":1,"message":"517","line":94,"column":8,"nodeType":"461","endLine":94,"endColumn":14},{"ruleId":"510","severity":1,"message":"518","line":94,"column":8,"nodeType":"461","endLine":94,"endColumn":14,"suggestions":"519"},{"ruleId":"471","severity":1,"message":"497","line":141,"column":31,"nodeType":"461","messageId":"462","endLine":141,"endColumn":32},{"ruleId":"481","severity":1,"message":"482","line":147,"column":38,"nodeType":"483","messageId":"484","endLine":147,"endColumn":40},{"ruleId":"473","severity":1,"message":"474","line":213,"column":15,"nodeType":"475","messageId":"476","endLine":213,"endColumn":17},{"ruleId":"473","severity":1,"message":"474","line":217,"column":20,"nodeType":"475","messageId":"476","endLine":217,"endColumn":22},{"ruleId":"471","severity":1,"message":"520","line":248,"column":9,"nodeType":"461","messageId":"462","endLine":248,"endColumn":14},{"ruleId":"471","severity":1,"message":"521","line":251,"column":9,"nodeType":"461","messageId":"462","endLine":251,"endColumn":16},{"ruleId":"471","severity":1,"message":"522","line":289,"column":12,"nodeType":"461","messageId":"462","endLine":289,"endColumn":21},{"ruleId":"523","severity":1,"message":"524","line":293,"column":31,"nodeType":"487","messageId":"525","endLine":293,"endColumn":50},{"ruleId":"473","severity":1,"message":"474","line":297,"column":42,"nodeType":"475","messageId":"476","endLine":297,"endColumn":44},{"ruleId":"481","severity":1,"message":"482","line":323,"column":32,"nodeType":"483","messageId":"484","endLine":323,"endColumn":34},{"ruleId":"471","severity":1,"message":"522","line":346,"column":12,"nodeType":"461","messageId":"462","endLine":346,"endColumn":21},{"ruleId":"481","severity":1,"message":"482","line":349,"column":34,"nodeType":"483","messageId":"484","endLine":349,"endColumn":36},{"ruleId":"471","severity":1,"message":"500","line":384,"column":12,"nodeType":"461","messageId":"462","endLine":384,"endColumn":17},{"ruleId":"481","severity":1,"message":"482","line":399,"column":34,"nodeType":"483","messageId":"484","endLine":399,"endColumn":36},{"ruleId":"481","severity":1,"message":"482","line":401,"column":38,"nodeType":"483","messageId":"484","endLine":401,"endColumn":40},{"ruleId":"471","severity":1,"message":"522","line":431,"column":12,"nodeType":"461","messageId":"462","endLine":431,"endColumn":21},{"ruleId":"481","severity":1,"message":"482","line":455,"column":41,"nodeType":"483","messageId":"484","endLine":455,"endColumn":43},{"ruleId":"481","severity":1,"message":"482","line":471,"column":46,"nodeType":"483","messageId":"484","endLine":471,"endColumn":48},{"ruleId":"481","severity":1,"message":"482","line":474,"column":40,"nodeType":"483","messageId":"484","endLine":474,"endColumn":42},{"ruleId":"473","severity":1,"message":"498","line":475,"column":33,"nodeType":"475","messageId":"476","endLine":475,"endColumn":35},{"ruleId":"473","severity":1,"message":"498","line":513,"column":20,"nodeType":"475","messageId":"476","endLine":513,"endColumn":22},{"ruleId":"471","severity":1,"message":"497","line":18,"column":26,"nodeType":"461","messageId":"462","endLine":18,"endColumn":27},{"ruleId":"481","severity":1,"message":"482","line":19,"column":57,"nodeType":"483","messageId":"484","endLine":19,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":22,"column":43,"nodeType":"483","messageId":"484","endLine":22,"endColumn":45},{"ruleId":"471","severity":1,"message":"497","line":81,"column":28,"nodeType":"461","messageId":"462","endLine":81,"endColumn":29},{"ruleId":"481","severity":1,"message":"482","line":83,"column":57,"nodeType":"483","messageId":"484","endLine":83,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":86,"column":43,"nodeType":"483","messageId":"484","endLine":86,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":110,"column":36,"nodeType":"475","messageId":"476","endLine":110,"endColumn":38},{"ruleId":"481","severity":1,"message":"482","line":160,"column":57,"nodeType":"483","messageId":"484","endLine":160,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":163,"column":43,"nodeType":"483","messageId":"484","endLine":163,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":179,"column":44,"nodeType":"475","messageId":"476","endLine":179,"endColumn":46},{"ruleId":"473","severity":1,"message":"474","line":207,"column":49,"nodeType":"475","messageId":"476","endLine":207,"endColumn":51},{"ruleId":"473","severity":1,"message":"474","line":223,"column":48,"nodeType":"475","messageId":"476","endLine":223,"endColumn":50},{"ruleId":"473","severity":1,"message":"474","line":266,"column":48,"nodeType":"475","messageId":"476","endLine":266,"endColumn":50},{"ruleId":"473","severity":1,"message":"474","line":295,"column":53,"nodeType":"475","messageId":"476","endLine":295,"endColumn":55},{"ruleId":"473","severity":1,"message":"474","line":310,"column":52,"nodeType":"475","messageId":"476","endLine":310,"endColumn":54},{"ruleId":"481","severity":1,"message":"482","line":534,"column":57,"nodeType":"483","messageId":"484","endLine":534,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":537,"column":43,"nodeType":"483","messageId":"484","endLine":537,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":553,"column":51,"nodeType":"475","messageId":"476","endLine":553,"endColumn":53},{"ruleId":"473","severity":1,"message":"474","line":581,"column":56,"nodeType":"475","messageId":"476","endLine":581,"endColumn":58},{"ruleId":"473","severity":1,"message":"474","line":597,"column":55,"nodeType":"475","messageId":"476","endLine":597,"endColumn":57},{"ruleId":"473","severity":1,"message":"474","line":640,"column":55,"nodeType":"475","messageId":"476","endLine":640,"endColumn":57},{"ruleId":"473","severity":1,"message":"474","line":669,"column":60,"nodeType":"475","messageId":"476","endLine":669,"endColumn":62},{"ruleId":"473","severity":1,"message":"474","line":684,"column":59,"nodeType":"475","messageId":"476","endLine":684,"endColumn":61},{"ruleId":"481","severity":1,"message":"482","line":726,"column":57,"nodeType":"483","messageId":"484","endLine":726,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":729,"column":43,"nodeType":"483","messageId":"484","endLine":729,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":745,"column":50,"nodeType":"475","messageId":"476","endLine":745,"endColumn":52},{"ruleId":"473","severity":1,"message":"474","line":745,"column":82,"nodeType":"475","messageId":"476","endLine":745,"endColumn":84},{"ruleId":"473","severity":1,"message":"474","line":773,"column":55,"nodeType":"475","messageId":"476","endLine":773,"endColumn":57},{"ruleId":"473","severity":1,"message":"474","line":773,"column":88,"nodeType":"475","messageId":"476","endLine":773,"endColumn":90},{"ruleId":"473","severity":1,"message":"474","line":789,"column":54,"nodeType":"475","messageId":"476","endLine":789,"endColumn":56},{"ruleId":"473","severity":1,"message":"474","line":789,"column":86,"nodeType":"475","messageId":"476","endLine":789,"endColumn":88},{"ruleId":"473","severity":1,"message":"474","line":832,"column":54,"nodeType":"475","messageId":"476","endLine":832,"endColumn":56},{"ruleId":"473","severity":1,"message":"474","line":832,"column":86,"nodeType":"475","messageId":"476","endLine":832,"endColumn":88},{"ruleId":"473","severity":1,"message":"474","line":861,"column":59,"nodeType":"475","messageId":"476","endLine":861,"endColumn":61},{"ruleId":"473","severity":1,"message":"474","line":861,"column":92,"nodeType":"475","messageId":"476","endLine":861,"endColumn":94},{"ruleId":"473","severity":1,"message":"474","line":876,"column":58,"nodeType":"475","messageId":"476","endLine":876,"endColumn":60},{"ruleId":"473","severity":1,"message":"474","line":876,"column":90,"nodeType":"475","messageId":"476","endLine":876,"endColumn":92},{"ruleId":"481","severity":1,"message":"482","line":1099,"column":57,"nodeType":"483","messageId":"484","endLine":1099,"endColumn":59},{"ruleId":"481","severity":1,"message":"482","line":1102,"column":43,"nodeType":"483","messageId":"484","endLine":1102,"endColumn":45},{"ruleId":"473","severity":1,"message":"474","line":1118,"column":51,"nodeType":"475","messageId":"476","endLine":1118,"endColumn":53},{"ruleId":"473","severity":1,"message":"474","line":1157,"column":55,"nodeType":"475","messageId":"476","endLine":1157,"endColumn":57},{"ruleId":"473","severity":1,"message":"474","line":107,"column":116,"nodeType":"475","messageId":"476","endLine":107,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":125,"column":104,"nodeType":"475","messageId":"476","endLine":125,"endColumn":106},{"ruleId":"477","severity":1,"message":"478","line":145,"column":15,"nodeType":"479","messageId":"480","endLine":145,"endColumn":38},{"ruleId":"477","severity":1,"message":"478","line":147,"column":16,"nodeType":"479","messageId":"480","endLine":147,"endColumn":48},{"ruleId":"477","severity":1,"message":"478","line":148,"column":17,"nodeType":"479","messageId":"480","endLine":148,"endColumn":50},{"ruleId":"477","severity":1,"message":"478","line":151,"column":16,"nodeType":"479","messageId":"480","endLine":151,"endColumn":60},{"ruleId":"473","severity":1,"message":"474","line":88,"column":116,"nodeType":"475","messageId":"476","endLine":88,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":108,"column":110,"nodeType":"475","messageId":"476","endLine":108,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":128,"column":15,"nodeType":"479","messageId":"480","endLine":128,"endColumn":38},{"ruleId":"473","severity":1,"message":"474","line":125,"column":116,"nodeType":"475","messageId":"476","endLine":125,"endColumn":118},{"ruleId":"473","severity":1,"message":"474","line":149,"column":110,"nodeType":"475","messageId":"476","endLine":149,"endColumn":112},{"ruleId":"477","severity":1,"message":"478","line":170,"column":15,"nodeType":"479","messageId":"480","endLine":170,"endColumn":38},{"ruleId":"471","severity":1,"message":"503","line":21,"column":10,"nodeType":"461","messageId":"462","endLine":21,"endColumn":27},{"ruleId":"471","severity":1,"message":"504","line":21,"column":29,"nodeType":"461","messageId":"462","endLine":21,"endColumn":47},{"ruleId":"471","severity":1,"message":"505","line":21,"column":49,"nodeType":"461","messageId":"462","endLine":21,"endColumn":64},{"ruleId":"471","severity":1,"message":"506","line":21,"column":66,"nodeType":"461","messageId":"462","endLine":21,"endColumn":85},{"ruleId":"477","severity":1,"message":"478","line":76,"column":15,"nodeType":"479","messageId":"480","endLine":76,"endColumn":38},{"ruleId":"485","severity":1,"message":"486","line":33,"column":35,"nodeType":"487","messageId":"476","endLine":33,"endColumn":51},{"ruleId":"477","severity":1,"message":"478","line":147,"column":15,"nodeType":"479","messageId":"480","endLine":147,"endColumn":38},{"ruleId":"485","severity":1,"message":"486","line":31,"column":35,"nodeType":"487","messageId":"476","endLine":31,"endColumn":51},{"ruleId":"473","severity":1,"message":"474","line":103,"column":102,"nodeType":"475","messageId":"476","endLine":103,"endColumn":104},{"ruleId":"477","severity":1,"message":"478","line":157,"column":15,"nodeType":"479","messageId":"480","endLine":157,"endColumn":38},{"ruleId":"526","severity":1,"message":"527","line":22,"column":17,"nodeType":"528","endLine":22,"endColumn":40},{"ruleId":"471","severity":1,"message":"529","line":14,"column":27,"nodeType":"461","messageId":"462","endLine":14,"endColumn":43},{"ruleId":"473","severity":1,"message":"474","line":32,"column":44,"nodeType":"475","messageId":"476","endLine":32,"endColumn":46},{"ruleId":"473","severity":1,"message":"474","line":50,"column":49,"nodeType":"475","messageId":"476","endLine":50,"endColumn":51},{"ruleId":"473","severity":1,"message":"474","line":53,"column":54,"nodeType":"475","messageId":"476","endLine":53,"endColumn":56},{"ruleId":"481","severity":1,"message":"482","line":94,"column":50,"nodeType":"483","messageId":"484","endLine":94,"endColumn":52},{"ruleId":"481","severity":1,"message":"482","line":111,"column":60,"nodeType":"483","messageId":"484","endLine":111,"endColumn":62},{"ruleId":"526","severity":1,"message":"527","line":223,"column":25,"nodeType":"528","endLine":223,"endColumn":67},{"ruleId":"471","severity":1,"message":"530","line":5,"column":9,"nodeType":"461","messageId":"462","endLine":5,"endColumn":17},{"ruleId":"471","severity":1,"message":"531","line":24,"column":20,"nodeType":"461","messageId":"462","endLine":24,"endColumn":29},{"ruleId":"485","severity":1,"message":"486","line":27,"column":35,"nodeType":"487","messageId":"476","endLine":27,"endColumn":51},{"ruleId":"473","severity":1,"message":"474","line":82,"column":102,"nodeType":"475","messageId":"476","endLine":82,"endColumn":104},{"ruleId":"471","severity":1,"message":"532","line":1,"column":16,"nodeType":"461","messageId":"462","endLine":1,"endColumn":20},{"ruleId":"471","severity":1,"message":"533","line":3,"column":9,"nodeType":"461","messageId":"462","endLine":3,"endColumn":14},{"ruleId":"471","severity":1,"message":"534","line":3,"column":23,"nodeType":"461","messageId":"462","endLine":3,"endColumn":28},{"ruleId":"473","severity":1,"message":"474","line":13,"column":68,"nodeType":"475","messageId":"476","endLine":13,"endColumn":70},{"ruleId":"481","severity":1,"message":"482","line":15,"column":38,"nodeType":"483","messageId":"484","endLine":15,"endColumn":40},{"ruleId":"481","severity":1,"message":"482","line":41,"column":41,"nodeType":"483","messageId":"484","endLine":41,"endColumn":43},{"ruleId":"485","severity":1,"message":"486","line":52,"column":35,"nodeType":"487","messageId":"476","endLine":52,"endColumn":51},{"ruleId":"526","severity":1,"message":"527","line":61,"column":13,"nodeType":"528","endLine":61,"endColumn":67},{"ruleId":"481","severity":1,"message":"482","line":75,"column":41,"nodeType":"483","messageId":"484","endLine":75,"endColumn":43},"no-unused-vars","'GlobalRouter' is defined but never used.","Identifier","unusedVar","'routers' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as string' instead of '<string>'.","TSTypeAssertion","as","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'useEffectBack' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-caller","Avoid arguments.callee.","MemberExpression","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Attributes' is defined but never used.","'ComponentClass' is defined but never used.","'FunctionComponent' is defined but never used.","'ReactElement' is defined but never used.","'ReactNode' is defined but never used.","'useCreated' is defined but never used.","'T' is defined but never used.","Expected '!==' and instead saw '!='.","'url' is assigned a value but never used.","'state' is assigned a value but never used.","'dataList' is assigned a value but never used.","'dacmr' is assigned a value but never used.","'manufacturerInput' is assigned a value but never used.","'deleteManufacturer' is assigned a value but never used.","'addManufacturer' is assigned a value but never used.","'manufacturerTotalDa' is assigned a value but never used.","'ReactComponentElement' is defined but never used.","'ReactDOM' is defined but never used.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setBoolValue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [boolValue, callback] as a second argument to the useEffect Hook.",["535"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["536"],["537"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: 'boolValue' and 'callback'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["538"],"'hours' is assigned a value but never used.","'minutes' is assigned a value but never used.","'tabelData' is assigned a value but never used.","no-self-assign","'dataList[\"orderNo\"]' is assigned to itself.","selfAssignment","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setCheckStrictly' is assigned a value but never used.","'useState' is defined but never used.","'changeDoc' is assigned a value but never used.","'memo' is defined but never used.","'Space' is defined but never used.","'Table' is defined but never used.",{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"541","fix":"543"},{"desc":"544","fix":"545"},"Add dependencies array: [boolValue, callback]",{"range":"546","text":"547"},"Update the dependencies array to be: [callback]",{"range":"548","text":"549"},{"range":"550","text":"549"},"Update the dependencies array to be: [boolValue, callback]",{"range":"551","text":"552"},[1669,1669],", [boolValue, callback]",[1821,1823],"[callback]",[1982,1984],[2384,2390],"[boolValue, callback]"]